{"SurveyEntry":{"SurveyID":"SV_6yzclsG6C2PT4mW","SurveyName":"friendly universe","SurveyDescription":null,"SurveyOwnerID":"UR_8dZwbGyxbGo1v4G","SurveyBrandID":"stanforduniversity","DivisionID":null,"SurveyLanguage":"EN","SurveyActiveResponseSet":"RS_bOTUhb5LjA8g6XQ","SurveyStatus":"Active","SurveyStartDate":"0000-00-00 00:00:00","SurveyExpirationDate":"0000-00-00 00:00:00","SurveyCreationDate":"2023-11-01 22:57:26","CreatorID":"UR_8dZwbGyxbGo1v4G","LastModified":"2023-11-01 23:15:59","LastAccessed":"0000-00-00 00:00:00","LastActivated":"2023-11-01 22:57:34","Deleted":null},"SurveyElements":[{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"BL","PrimaryAttribute":"Survey Blocks","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"1":{"Type":"Trash","Description":"Trash \/ Unused Questions","ID":"BL_bqRcr6prrYK8yc5","BlockElements":[{"Type":"Question","QuestionID":"QID1"},{"Type":"Question","QuestionID":"QID27"}]},"2":{"Type":"Standard","SubType":"","Description":"transition to friendlyUnivers","ID":"BL_cGQTWmicNhnKEW9","Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"},"BlockElements":[{"Type":"Question","QuestionID":"QID2"},{"Type":"Question","QuestionID":"QID28"}]},"3":{"Type":"Standard","Description":"friendlyUniverse_enterNodes","ID":"BL_earSzG6yAJUtjLL","BlockElements":[{"Type":"Question","QuestionID":"QID3"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID4"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID5"},{"Type":"Question","QuestionID":"QID6"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID7"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID8"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID9"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID10"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID11"},{"Type":"Question","QuestionID":"QID12"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID13"},{"Type":"Question","QuestionID":"QID14"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID15"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID16"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID17"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID18"}],"Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"}},"4":{"Type":"Standard","SubType":"","Description":"friendlyUniverse_deleteDuplicate","ID":"BL_086ssBnOzsRlva5","BlockElements":[{"Type":"Question","QuestionID":"QID19"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID20"}],"Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"}},"5":{"Type":"Standard","Description":"friendlyUniverse-closeness","ID":"BL_87e3RylsKxsxQNf","BlockElements":[{"Type":"Question","QuestionID":"QID21"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID22"}],"Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"}},"6":{"Type":"Standard","Description":"friendlyUniverse_FoF","ID":"BL_9Rh9jAEjnca1s0d","BlockElements":[{"Type":"Question","QuestionID":"QID23"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID24"}],"Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"}},"7":{"Type":"Standard","SubType":"","Description":"friendlyUniverse_showUniverse","ID":"BL_dgNMSoWSHqGpIZ7","Options":{"BlockLocking":false,"RandomizeQuestions":"false","BlockVisibility":"Expanded"},"BlockElements":[{"Type":"Question","QuestionID":"QID25"}]},"8":{"Type":"Standard","SubType":"","Description":"thankyou+cleaningNameVariables","ID":"BL_77f3upOway8d4Tr","BlockElements":[{"Type":"Question","QuestionID":"QID26"}],"Options":{"BlockLocking":"false","RandomizeQuestions":"false","BlockVisibility":"Expanded"}}}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"FL","PrimaryAttribute":"Survey Flow","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"Type":"Root","FlowID":"FL_1","Flow":[{"Type":"EmbeddedData","FlowID":"FL_9","EmbeddedData":[{"Description":"nodes","Type":"Custom","Field":"nodes","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/nodes}"},{"Description":"edges","Type":"Custom","Field":"edges","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/edges2}"},{"Description":"family","Type":"Custom","Field":"family","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/family}"},{"Description":"friend","Type":"Custom","Field":"friend","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/friend}"},{"Description":"texting","Type":"Custom","Field":"texting","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/texting}"},{"Description":"f2f","Type":"Custom","Field":"f2f","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/f2f}"},{"Description":"social","Type":"Custom","Field":"social","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/social}"},{"Description":"groups","Type":"Custom","Field":"groups","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/groups}"},{"Description":"networkName","Type":"Custom","Field":"networkName","VariableType":"String","DataVisibility":[],"AnalyzeText":false,"Value":"${e:\/\/Field\/networkName}"}]},{"Type":"Standard","ID":"BL_cGQTWmicNhnKEW9","FlowID":"FL_3"},{"Type":"Standard","ID":"BL_earSzG6yAJUtjLL","FlowID":"FL_4"},{"Type":"Standard","ID":"BL_086ssBnOzsRlva5","FlowID":"FL_5"},{"Type":"Standard","ID":"BL_87e3RylsKxsxQNf","FlowID":"FL_6"},{"Type":"Standard","ID":"BL_9Rh9jAEjnca1s0d","FlowID":"FL_7"},{"Type":"Standard","ID":"BL_dgNMSoWSHqGpIZ7","FlowID":"FL_8"},{"Type":"Standard","ID":"BL_77f3upOway8d4Tr","FlowID":"FL_10"}],"Properties":{"Count":10,"RemovedFieldsets":[]}}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"PL","PrimaryAttribute":"Preview Link","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"PreviewType":"Brand","PreviewID":"9f9b1daf-3a5b-4285-b84d-66503a07e660"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SO","PrimaryAttribute":"Survey Options","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"BackButton":"false","SaveAndContinue":"true","SurveyProtection":"PublicSurvey","BallotBoxStuffingPrevention":"false","NoIndex":"Yes","SecureResponseFiles":"true","SurveyExpiration":"None","SurveyTermination":"DefaultMessage","Header":"","Footer":"","ProgressBarDisplay":"None","PartialData":"+1 week","ValidationMessage":"","PreviousButton":" \u2190 ","NextButton":" \u2192 ","SkinLibrary":"stanforduniversity","SkinType":"templated","Skin":{"brandingId":"5236136929","templateId":"*base","overrides":null},"NewScoring":1,"CustomStyles":[],"ProtectSelectionIds":true,"SurveyTitle":"Qualtrics Survey | Qualtrics Experience Management","SurveyMetaDescription":"The most powerful, simple and trusted way to gather experience data. Start your journey to experience management and try a free account today."}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SCO","PrimaryAttribute":"Scoring","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"ScoringCategories":[],"ScoringCategoryGroups":[],"ScoringSummaryCategory":null,"ScoringSummaryAfterQuestions":0,"ScoringSummaryAfterSurvey":0,"DefaultScoringCategory":null,"AutoScoringCategory":null}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"PROJ","PrimaryAttribute":"CORE","SecondaryAttribute":null,"TertiaryAttribute":"1.1.0","Payload":{"ProjectCategory":"CORE","SchemaVersion":"1.1.0"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"STAT","PrimaryAttribute":"Survey Statistics","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"MobileCompatible":true,"ID":"Survey Statistics"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID14","SecondaryAttribute":" ","TertiaryAttribute":null,"Payload":{"QuestionText":"&nbsp;","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":" ","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText_Unsafe":"&nbsp;","DataExportTag":"Q14","QuestionID":"QID14"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID11","SecondaryAttribute":"1: \u00a0 Please enter the\u00a0names of your family members who you know personally. \u00a0 If two or more peop","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>1:<\/strong>\n<div>&nbsp;<\/div>\n\n<div>Please enter<strong> <\/strong>the<strong>&nbsp;<\/strong>names of your family members who you know personally.\n\n<div>&nbsp;<\/div>\n\n<div>If two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>Separate the names using commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"1: \u00a0 Please enter the\u00a0names of your family members who you know personally. \u00a0 If two or more peop...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID11","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID11\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID11","LeftOperand":"q:\/\/QID11\/ChoiceTextEntryValue","RightOperand":"\"","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">1:\n&amp;nbsp;\n\nPlease enter the&amp;nbsp;names of your family members who you know personally.\n\n&amp;nbsp;\n\nIf two or more people in your life have the same name, be sure to add a last initial so you don't get...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID11","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID11\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID11","LeftOperand":"q:\/\/QID11\/ChoiceTextEntryValue","RightOperand":";","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">1:\n&amp;nbsp;\n\nPlease enter the&amp;nbsp;names of your family members who you know personally.\n\n&amp;nbsp;\n\nIf two or more people in your life have the same name, be sure to add a last initial so you don't get...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":7,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('family', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"<strong>1:<\/strong>\n<div>&nbsp;<\/div>\n\n<div>Please enter<strong> <\/strong>the<strong>&nbsp;<\/strong>names of your family members who you know personally.\n\n<div>&nbsp;<\/div>\n\n<div>If two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>Separate the names using commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div>\n<\/div>","DataExportTag":"Q11","QuestionID":"QID11"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"QC","PrimaryAttribute":"Survey Question Count","SecondaryAttribute":"28","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID13","SecondaryAttribute":"2: \u00a0 Please enter the names of your best friends.\u00a0 \u00a0 If two or more people in your life have the.","TertiaryAttribute":null,"Payload":{"QuestionText":"<span style=\"font-weight: 700;\">2:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of your best friends.&nbsp;<\/div>\n\n<div>\n<div>&nbsp;<\/div>\n\n<div>If two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"2: \u00a0 Please enter the names of your best friends.\u00a0 \u00a0 If two or more people in your life have the...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID13","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID13\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID13","LeftOperand":"q:\/\/QID13\/ChoiceTextEntryValue","RightOperand":"\"","IgnoreCase":1,"Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">2:\n&amp;nbsp;\n\nPlease enter the names of your best friends.&amp;nbsp;\n\n\n&amp;nbsp;\n\nIf two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.\n\n&amp;nbsp;\n...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID13","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID13\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID13","LeftOperand":"q:\/\/QID13\/ChoiceTextEntryValue","RightOperand":";","IgnoreCase":1,"Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">2:\n&amp;nbsp;\n\nPlease enter the names of your best friends.&amp;nbsp;\n\n\n&amp;nbsp;\n\nIf two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.\n\n&amp;nbsp;\n...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"<span style=\"font-weight: 700;\">2:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of your best friends.&nbsp;<\/div>\n\n<div>\n<div>&nbsp;<\/div>\n\n<div>If two or more people in your life have the same name, be sure to add a last initial so you don't get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div>\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('friend', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","DataExportTag":"Q13","QuestionID":"QID13"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID15","SecondaryAttribute":"3: \u00a0 Please take out your phone and look at the voice call log.\u00a0Starting with the most recent cal.","TertiaryAttribute":null,"Payload":{"QuestionText":"<span style=\"font-weight: 700;\">3:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please take out your phone and look at the voice call log.&nbsp;Starting with the most recent call and going backwards, enter the names of everyone you know personally who you have called or received a call from in the last week.&nbsp;<\/div><div><br><\/div><div>If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>\n<div>Separate the names using&nbsp;commas&nbsp;(,).&nbsp; For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"3: \u00a0 Please take out your phone and look at the voice call log.\u00a0Starting with the most recent cal...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID15","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID15\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID15","LeftOperand":"q:\/\/QID15\/ChoiceTextEntryValue","RightOperand":"\"","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">3:\n&amp;nbsp;\n\nPlease take out your phone and look at the voice call log.&amp;nbsp;Starting with the most recent call and going backwards, enter the names of everyone you know personally who you have calle...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID15","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID15\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID15","LeftOperand":"q:\/\/QID15\/ChoiceTextEntryValue","RightOperand":";","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">3:\n&amp;nbsp;\n\nPlease take out your phone and look at the voice call log.&amp;nbsp;Starting with the most recent call and going backwards, enter the names of everyone you know personally who you have calle...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"<span style=\"font-weight: 700;\">3:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please take out your phone and look at the voice call log.&nbsp;Starting with the most recent call and going backwards, enter the names of everyone you know personally who you have called or received a call from in the last week.&nbsp;<\/div><div><br><\/div><div>If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>\n<div>Separate the names using&nbsp;commas&nbsp;(,).&nbsp; For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div>\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('calling', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","DataExportTag":"Q15","QuestionID":"QID15"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID16","SecondaryAttribute":"4: \u00a0 Please take out your phone and look at the texting (SMS) log. Starting with the most recent...","TertiaryAttribute":null,"Payload":{"QuestionText":"<span style=\"font-weight: 700;\">4:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted or received a text from in the last week. For large group chats, don\u2019t try to list everyone in the group chat; just list the names of the people who have recently sent messages to the chat.&nbsp;<\/div><div><br><\/div><div>If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div><div><br><\/div><div><div>Separate the names using&nbsp;commas&nbsp;(,).&nbsp; For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"4: \u00a0 Please take out your phone and look at the texting (SMS) log. Starting with the most recent...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID16","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID16\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID16","LeftOperand":"q:\/\/QID16\/ChoiceTextEntryValue","RightOperand":"\"","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">4:\n&amp;nbsp;\n\nPlease take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID16","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID16\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID16","LeftOperand":"q:\/\/QID16\/ChoiceTextEntryValue","RightOperand":";","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">4:\n&amp;nbsp;\n\nPlease take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"<span style=\"font-weight: 700;\">4:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted or received a text from in the last week. For large group chats, don\u2019t try to list everyone in the group chat; just list the names of the people who have recently sent messages to the chat.&nbsp;<\/div><div><br><\/div><div>If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div><div><br><\/div><div><div>Separate the names using&nbsp;commas&nbsp;(,).&nbsp; For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div>\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('texting', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","DataExportTag":"Q16","QuestionID":"QID16"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID17","SecondaryAttribute":"5: \u00a0 Please enter the names of everyone you know personally who you saw (face to face) in the las..","TertiaryAttribute":null,"Payload":{"QuestionText":"<span style=\"font-weight: 700;\">5:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of everyone you know personally who you saw (face to face) in the last week. If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;&nbsp;<\/div><div><br><div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div><div><br><\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"5: \u00a0 Please enter the names of everyone you know personally who you saw (face to face) in the las...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID16","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID16\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID16","LeftOperand":"q:\/\/QID16\/ChoiceTextEntryValue","RightOperand":"\"","IgnoreCase":1,"Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">4:\n&amp;nbsp;\n\nPlease take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID16","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID16\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID16","LeftOperand":"q:\/\/QID16\/ChoiceTextEntryValue","RightOperand":";","IgnoreCase":1,"Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">4:\n&amp;nbsp;\n\nPlease take out your phone and look at the texting (SMS) log. Starting with the most recent text and going backwards, enter the names of everyone you know personally who you have texted ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"<span style=\"font-weight: 700;\">5:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of everyone you know personally who you saw (face to face) in the last week. If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;&nbsp;<\/div><div><br><div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W<\/div><div><br><\/div><div><br><\/div><div><br><\/div>\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('f2f', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","DataExportTag":"Q17","QuestionID":"QID17"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID18","SecondaryAttribute":"6: \u00a0 Please enter the names of everyone you have interacted with on social media (i.e. Snapchat,...","TertiaryAttribute":null,"Payload":{"QuestionText":"<span style=\"font-weight: 700;\">6:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of everyone you have interacted with on social media (i.e. Snapchat, Instagram, Facebook) in the last week. If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;\n<div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":610,"InputHeight":40,"AllowFreeResponse":"false"},"QuestionDescription":"6: \u00a0 Please enter the names of everyone you have interacted with on social media (i.e. Snapchat,...","Validation":{"Settings":{"ForceResponse":"RequestResponse","ForceResponseType":"RequestResponse","Type":"CustomValidation","ValidDateType":"DateWithFormat","ValidPhoneType":"ValidUSPhone","ValidZipType":"ValidUSZip","CustomValidation":{"Logic":{"0":{"0":{"QuestionID":"QID18","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID18\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID18","LeftOperand":"q:\/\/QID18\/ChoiceTextEntryValue","RightOperand":"\"","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">If<\/span> <span class=\"QuestionDesc\">6:\n&amp;nbsp;\n\nPlease enter the names of everyone you have interacted with on social media (i.e. Snapchat, Instagram, Facebook) in the last week. If two or more people in your life have the same name, ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> \" <\/span>"},"1":{"QuestionID":"QID18","QuestionIsInLoop":"no","ChoiceLocator":"q:\/\/QID18\/ChoiceTextEntryValue","Operator":"DoesNotContain","QuestionIDFromLocator":"QID18","LeftOperand":"q:\/\/QID18\/ChoiceTextEntryValue","RightOperand":";","Type":"Expression","LogicType":"Question","Description":"<span class=\"ConjDesc\">And<\/span> <span class=\"QuestionDesc\">6:\n&amp;nbsp;\n\nPlease enter the names of everyone you have interacted with on social media (i.e. Snapchat, Instagram, Facebook) in the last week. If two or more people in your life have the same name, ...<\/span> <span class=\"LeftOpDesc\">Text Response<\/span> <span class=\"OpDesc\">Does Not Contain<\/span> <span class=\"RightOpDesc\"> ; <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Message":{"messageID":"MS_b1Ik4w0IAqPZydf","subMessageID":"VE_ERROR","libraryID":"UR_ahl2cFTkHRwwWdD","description":"Error Text"}}}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText_Unsafe":"<span style=\"font-weight: 700;\">6:<\/span>\n<div>&nbsp;<\/div>\n\n<div>Please enter the names of everyone you have interacted with on social media (i.e. Snapchat, Instagram, Facebook) in the last week. If two or more people in your life have the same name, be sure to add a last initial so you don\u2019t get them mixed up.<\/div>\n\n<div>&nbsp;\n<div>Separate the names using&nbsp;commas&nbsp;(,). For example: Emma, Bob, Mary, Jim, Mike, Angela T, Angela W.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('social', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});","SearchSource":{"AllowFreeResponse":"false"},"DataExportTag":"Q18","QuestionID":"QID18"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID6","SecondaryAttribute":"\u00a0","TertiaryAttribute":null,"Payload":{"QuestionText":"&nbsp;<div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"\u00a0","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"&nbsp;<div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DataExportTag":"Q6","QuestionID":"QID6"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID28","SecondaryAttribute":"\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0","TertiaryAttribute":null,"Payload":{"QuestionText":"&nbsp;<div>&nbsp;&nbsp;<\/div><div>&nbsp;&nbsp;<\/div><div>&nbsp;&nbsp;<\/div>","DefaultChoices":false,"DataExportTag":"Q28","QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionID":"QID28"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID4","SecondaryAttribute":"\u00a0 Your Goal Populate your universe with everyone in your social network that you talk to regularl..","TertiaryAttribute":null,"Payload":{"QuestionText":"<div>&nbsp;<\/div><div><span style=\"font-weight: 700;\">Your Goal<\/span><\/div><div><span style=\"font-weight: 700;\"><br><\/span><\/div><div>Populate your universe with everyone in your social network that you talk to regularly or know personally.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"\u00a0 Your Goal Populate your universe with everyone in your social network that you talk to regularl...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<div>&nbsp;<\/div><div><span style=\"font-weight: 700;\">Your Goal<\/span><\/div><div><span style=\"font-weight: 700;\"><br><\/span><\/div><div>Populate your universe with everyone in your social network that you talk to regularly or know personally.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DataExportTag":"Q4","QuestionID":"QID4"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID12","SecondaryAttribute":"\u00a0\u00a0 \u00a0\u00a0","TertiaryAttribute":null,"Payload":{"QuestionText":"&nbsp;&nbsp;<div>&nbsp;&nbsp;<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"\u00a0\u00a0 \u00a0\u00a0","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText_Unsafe":"&nbsp;&nbsp;<div>&nbsp;<\/div><div>&nbsp;<\/div>","DataVisibility":{"Private":false,"Hidden":false},"DataExportTag":"Q12","QuestionID":"QID12"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID10","SecondaryAttribute":"Before we start ... just one more important thing: \u00a0 About Privacy \u00a0 After you have finished the..","TertiaryAttribute":null,"Payload":{"QuestionText":"Before we start ... just one more important thing:\n<div>&nbsp;<\/div>\n\n<div><strong>About Privacy<\/strong><\/div>\n\n<div>&nbsp;<\/div>\n\n<div>After you have finished the game, we will do everything we can to make the data as anonymous as possible. We will remove <u>all<\/u> of your friends' and family's names\/nicknames.&nbsp;<\/div><div><br><\/div><div>For instance, if you entered \"mom, dad, Lucy, tom\", we will transform the names to ID numbers \"1, 2, 3, 4\". No names will be stored on our end.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div><strong>Have fun!<\/strong><\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Before we start ... just one more important thing: \u00a0 About Privacy \u00a0 After you have finished the...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"Before we start ... just one more important thing:\n<div>&nbsp;<\/div>\n\n<div><strong>About Privacy<\/strong><\/div>\n\n<div>&nbsp;<\/div>\n\n<div>After you have finished the game, we will do everything we can to make the data as anonymous as possible. We will remove <u>all<\/u> of your friends' and family's names\/nicknames.&nbsp;<\/div><div><br><\/div><div>For instance, if you entered \"mom, dad, Lucy, tom\", we will transform the names to ID numbers \"1, 2, 3, 4\". No names will be stored on our end.<\/div>\n\n<div>&nbsp;<\/div>\n\n<div><strong>Have fun!<\/strong><\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div>","DataExportTag":"Q10","QuestionID":"QID10"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID5","SecondaryAttribute":"Before you get started\u2026 give your universe a name:","TertiaryAttribute":null,"Payload":{"QuestionText":"Before you get started\u2026<div><br><\/div><div>give your universe a name:<\/div>","DefaultChoices":false,"QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText","AllowFreeResponse":"false","InputWidth":400,"InputHeight":32},"QuestionDescription":"Before you get started\u2026 give your universe a name:","Validation":{"Settings":{"ForceResponse":"ON","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"QuestionText_Unsafe":"Before you get started\u2026<div><br><\/div><div>give your universe a name:<\/div>","DataExportTag":"Q5","QuestionID":"QID5","QuestionJS":"Qualtrics.SurveyEngine.addOnPageSubmit(function()\n{\n\tvar qid = this.questionId;\n\tvar textFld = document.getElementById('QR~' + qid);\n\tvar textRsp = textFld.value;\n\tQualtrics.SurveyEngine.setEmbeddedData('networkName', textRsp);  \t\n\tvar strippedResp = textRsp.replace(\/[\\w\\s]\/gi,\"a\");\n\tjQuery(\"#\"+qid+\" .InputText\").val(strippedResp);\n\n});"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID1","SecondaryAttribute":"Click to write the question text","TertiaryAttribute":null,"Payload":{"QuestionText":"Click to write the question text","DataExportTag":"Q1","QuestionType":"MC","Selector":"SAVR","SubSelector":"TX","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Click to write the question text","Choices":{"1":{"Display":"Click to write Choice 1"},"2":{"Display":"Click to write Choice 2"},"3":{"Display":"Click to write Choice 3"}},"ChoiceOrder":["1","2","3"],"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionID":"QID1"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID3","SecondaryAttribute":"Congratulations!\u00a0 \u00a0 You have just been awarded an empty universe for you and all your friends and.","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Congratulations!&nbsp;<\/strong>\n<div>&nbsp;<\/div>\n\n<div>You have just been awarded an empty universe for you and all your friends and family. This task is trying to understand how individuals\u2019 universes (or social networks) are different from one another in the 21st Century.<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"GRB","SubSelector":"WTXB","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Congratulations!\u00a0 \u00a0 You have just been awarded an empty universe for you and all your friends and...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"Graphics":"IM_elc2Sj1GU7Nfob3","GraphicsDescription":"Screen shot 2019 03 22 at 1.48.03 pm","QuestionText_Unsafe":"<strong>Congratulations!&nbsp;<\/strong>\n<div>&nbsp;<\/div>\n\n<div>You have just been awarded an empty universe for you and all your friends and family. This task is trying to understand how individuals\u2019 universes (or social networks) are different from one another in the 21st Century.<\/div>","DataExportTag":"Q3","QuestionID":"QID3"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"RS","PrimaryAttribute":"RS_bOTUhb5LjA8g6XQ","SecondaryAttribute":"Default Response Set","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID24","SecondaryAttribute":"Friends of friends - who knows who? Next friend You're done! Click the \"Next\" button on the botto...","TertiaryAttribute":null,"Payload":{"DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"\/>\n  <title>Friends | of <\/title>\n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n\n<link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n<script type=\"text\/javascript\" src=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis.js\"><\/script>\n<link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n<\/head>\n\n<body>\n<h2>Friends of friends - who knows who?<\/h2>\n\n<div id=\"buttonsDiv\" class = \"buttonsDiv\" >\n\n\n  <button id=\"nextFriend\" type=\"button\" class = \"nextFriend\" style=\"float: right;\">Next friend<\/button>\n<\/div>\n<div id=\"mynetwork\" ><\/div>\n\n<div id=\"done\" class = \"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function()\n{\n\n  $(document).ready(function() {\n\t  \n\tvar USE_QUALTRICS = 1;\n  \n  var canvasHeight;\n  var canvasWidth;\n  var wasDragging = false;\n  var oldPosition;\n  \n  var edgesJSON = null;\n  var nodes;\n  var edges;\n  var allEdges;  \n  var network = null;\n  var lastScale = 1.0;\n  var gravityConstant = 1.0;\n  \n  var data;\n  var seed = 2;\n  var edgeMode = true;\n  var currentIdName = \"\";\n  var currentID = NaN; \/\/ is the INDEX of the person\n      \n  function destroy() {\n  \tif (network !== null) {\n          network.destroy();\n          network = null;\n  }}\n\t  \n\t  String.prototype.replaceAll = function(str1, str2, ignore) \n{\n    return this.replace(new RegExp(str1.replace(\/([\\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])\/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(\/\\$\/g,\"$$$$\"):str2);\n} \n  \n  function draw() {\n  \tdestroy();\n  \tnodes = new vis.DataSet({});\n  \tedges = new vis.DataSet({});\n\t  \n\t \n\t  if (USE_QUALTRICS)\n\t    {\n\t\t\tvar nodeString = \"${e:\/\/Field\/nodes}\";\n\t\t\tvar edgeString = \"${e:\/\/Field\/edges}\";\n      }\n\telse\n\t{\n    var nodeString = '[{\"id\":0,\"label\":\"daniel\"}, {\"id\":1,\"label\":\" nana\"},{\"id\":2,\"label\":\" somi\"}, {\"id\":3,\"label\":\" umma.\"},{\"id\":4,\"label\":\"a.s.f.v.\"}]';\n    var edgeString = '[{\"from\":0,\"to\":1},{\"from\":0,\"to\":2},{\"from\":0,\"to\":3},{\"from\":1,\"to\":2},{\"from\":1,\"to\":3},{\"from\":2,\"to\":3}]';\n\t}\n\t\n\t var nodeArray = JSON.parse(nodeString.replaceAll(\"'\", '\"'));\n  \tvar nodeCount = nodeArray.length;\n  \tallEdges = JSON.parse(edgeString.replaceAll(\"'\", '\"')); \/\/ allEdges: actual global edges\n  \tvar allEdgesCount = allEdges.length;   \n\t  \n  \tfor (var i = 0; i < nodeCount; i++) {\n        nodes.add(nodeArray[i])\n    }\n\n    currentID = 0;\n  \n    \/\/ defines two \"invisible nodes\" for seperating purposes\n\t  nodes.add({\"id\":1000, \"label\":\"invisible1\",\"x\": -250, \"y\": 0,\"fixed\" : true, \"hidden\" : true, \"size\":1});\n    nodes.add({\"id\":1001, \"label\":\"invisible2\", \"x\": 250, \"y\": 0,\"fixed\" : true, \"hidden\" : true, \"size\":1});\n\n    initializePerson(0);\n        \/\/ create a network\n        var container = document.getElementById('mynetwork');\n        var options = {\n          locale: 'en',\n          height:'600px',\n          width:'800px',\n\t\t\t\"interaction\": {\"dragView\": false, \"zoomView\": false, \"navigationButtons\": false},\n  \t\t\"physics\": {\"enabled\": true, \"maxVelocity\": 10,\n  \t\t\t\"barnesHut\": {\"gravitationalConstant\": -1000, \"damping\":0.5, \"centralGravity\": 0.01, \"avoidOverlap\":1}},\n          autoResize:false,\n  \t      layout: {randomSeed:seed}, \/\/ just to make sure the layout is the same when the locale is changed\n  \t      manipulation: {\n  \t        enabled: false,\n  \t        initiallyActive: false\n  \t\n    }};\n    \n    data = { nodes:nodes, edges:edges };\n    network = new vis.Network(container, data, options);\n    \n    network.on('beforeDrawing', drawBefore);\n    network.on('dragging', doDragging);\n    network.on('dragStart', doDragStart);\n    network.on('dragEnd', doDragOver);\n    \n    network.moveNode(1000, -250, 0);\n    network.moveNode(1001, 250, 0);\n  }\n  \n  function initializePerson(newID){\n    currentID = newID;\n    currentIdName = nodes.get(currentID).label;\n     \/\/ get the currentID's connections\n    var connected = [];\n    edges.clear();\n\n    for (var i = 0; i < allEdges.length; i++) {\n      if (allEdges[i].from == currentID){\n        connected.push(findNodeIndex(nodes, allEdges[i].to));\n      } else if (allEdges[i].to == currentID){\n        connected.push(findNodeIndex(nodes, allEdges[i].from));\n      }\n    }\n    for (var j = 0; j < nodes.length; j++) {\n      if (j != currentID && nodes.get(j)){\n        nodes.update({id: j, hidden: false});\n        if (connected.includes(j)){\n          edges.add({\n            id: j ,\n            from: j,\n            to: 1000,\n            hidden: false,\n            smooth:false, \n\t\t\t  length: 1\n          });\n        } else {\n          edges.add({\n            id: j,\n            from: j,\n            to: 1001,\n            hidden: false,\n            smooth:false, \n\t\t\t  length: 1\n          });\n        }\n        } else if (j == currentID) {\n        nodes.update({id: j, hidden: true});\n      } \n      }\n  }\n  \n  function nextPerson(){\n    if (getEdgesOfNode(currentID, allEdges) == 0){\n        if (confirm(\"Are you sure that no one knows this person?\")){\n          if (nodes.get(currentID + 1))\n          {\n            initializePerson(currentID + 1);\n    \n          } else{\n            jQuery(\"#done\").detach().appendTo(\"#mynetwork\");  \n            jQuery(\"#done\").css(\"display\", \"block\");\n            jQuery(\"#nextFriend\").css(\"display\", \"none\");\n          if (USE_QUALTRICS)\n          {\n\t\t        updateQualtricsData();\n\t         }\n          }\n          \n        }\n        else {\n          return;\n        }\n    } else {\n      if (nodes.get(currentID + 1))\n          {\n            initializePerson(currentID + 1);\n            \n          } else{\n            jQuery(\"#done\").detach().appendTo(\"#mynetwork\");  \n            jQuery(\"#done\").css(\"display\", \"block\");\n            jQuery(\"#nextFriend\").css(\"display\", \"none\");\n\t\t\t$('#NextButton').show();\n          if (USE_QUALTRICS)\n          {\n\t\t        updateQualtricsData();\n\t         }\n          }\n    }\n  }\n  \n  function findNodeIndex(node, nodeID){\n      var nodeIndex = NaN;\n      for (var i = 0; i < node.length; i++) {\n        if (i == nodeID){\n        nodeIndex = i;\n        break;\n      }\n      } \n      return nodeIndex;\n    }\n    \n  function findEdgeIndex(edgeArray, nodeID1, nodeID2){\n      var edgeIndex = NaN;\n      for (var i = 0; i < edgeArray.length; i++) {\n        if (edgeArray[i].from == nodeID1 && edgeArray[i].to == nodeID2){\n        edgeIndex = i;\n        break;\n        } else if (edgeArray[i].to == nodeID1 && edgeArray[i].from == nodeID2){\n        edgeIndex = i;\n        break;\n        }\n      } \n      return edgeIndex;\n    }\n  \n  function saveData(data,callback) {\t\t\n    data.id = document.getElementById('node-id').value;\n    data.label = document.getElementById('node-label').value;\n    clearPopUp();\n    callback(data);\n  }\n  \n  function init() {\n    draw();\n  }\n\t\n  function updateQualtricsData(){\n    var edgesJSON2 = JSON.stringify(allEdges).replaceAll('\"',\"'\");\n    \/\/nodesJSON = JSON.stringify(nodes.get({fields: ['id', 'label', 'closeness']}));\n  \tQualtrics.SurveyEngine.setEmbeddedData('edges2', edgesJSON2);\n  }\n\t  \n  function getEdgesOfNode(nodeId, edgeArray) {\n    var edgeNum = 0;\n    for (var i = 0; i < edgeArray.length; i++) {\n        if (edgeArray[i].from == nodeId || edgeArray[i].to == nodeId){\n        edgeNum = edgeNum + 1;\n        }\n    }\n    return edgeNum;\n}\n  \n  \n  init();\n\n  \n  function getDistance(x, y)\n  {\n  \treturn Math.sqrt(Math.pow(x,2) + Math.pow(y,2));\n  }\n  \n  function doDragging(data)\n  {\n\n  \tif (data.nodes.length > 0)\n  \t{\n  \t\twasDragging = data.nodes[0];\n  \t\n  \t}\n  }\n  \n  function doDragStart(data)\n  {\n  }\n  \n  \n  \/\/ function to drag people between connected and unconnected\n  function doDragOver(data)\n  {\n    if (data.pointer.canvas.x < 0)\n    {\n    edges.update({\n         id: data.nodes[0],\n          from: data.nodes[0],\n          to: 1000,\n          hidden: false,\n          smooth:false,\n\t\tlength: 1\n      });\n    allEdges.push({\n      from: data.nodes[0],\n      to: currentID\n    });\n    }\n    else\n    {\n    edges.update([\n      {id: data.nodes[0],\n          from: data.nodes[0],\n          to: 1001,\n          hidden: false,\n          smooth:false,\n\t   length: 1\n      }\n    ]);\n    var currentEdgeIndex = findEdgeIndex(allEdges, data.nodes[0], currentID);\n    allEdges.splice(currentEdgeIndex, 1);\n    }\n    \n  \twasDragging = null;\n  }\n  \n   function drawBefore(context, nodeLabel)\n  {\n    network.moveTo({animation: false, position: {x:0, y:0}});\n\n  \tcanvasHeight = context.canvas.clientHeight;\n  \tcanvasWidth = context.canvas.clientWidth;\n  \t\n  \tcontext.beginPath();\n    context.moveTo(0, -canvasHeight\/2);\n    context.lineTo(0, canvasHeight\/2);\n    context.strokeStyle = \"#7acfd6\";\n    context.lineWidth = 5;\n    context.stroke();\n    \n    context.font = \"30px Arial\";\n    context.fillStyle = \"white\";\n    context.textAlign = \"center\";\n    \n    context.fillText(\"Friends of \".concat(currentIdName), -canvasWidth\/4, -canvasHeight\/2+50);\n    context.fillText(\"Not friends of \".concat(currentIdName),canvasWidth\/4, -canvasHeight\/2+50);\n  }\n  \n    \n    jQuery('#nextFriend').click(nextPerson);\n  \n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/\/\/\/  Their code goes below\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \n  function loadJSON(path, success, error) {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n          success(JSON.parse(xhr.responseText));\n        }\n        else {\n          error(xhr);\n        }\n      }\n    };\n    xhr.open('GET', path, true);\n    xhr.send();\n  }\n\n  function getScaleFreeNetwork(nodeCount) {\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(Math.random() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n\n        var from = i;\n        var to = j;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  }\n  \n  var randomSeed = 764; \/\/ Math.round(Math.random()*1000);\n  function seededRandom() {\n    var x = Math.sin(randomSeed++) * 10000;\n    return x - Math.floor(x);\n  }\n  \n  function getScaleFreeNetworkSeeded(nodeCount, seed) {\n    if (seed) {\n      randomSeed = Number(seed);\n    }\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n    var edgesId = 0;\n  \n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(seededRandom() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n        var from = i;\n        var to = j;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  \n  }\n});\n\n\/\/});\n});\n\nQualtrics.SurveyEngine.addOnReady(function()\n{\n\t\/*Place your JavaScript here to run when the page is fully displayed*\/\n\t$('#NextButton').hide();\n\n});\n\nQualtrics.SurveyEngine.addOnUnload(function()\n{\n\t\/*Place your JavaScript here to run when the page is unloaded*\/\n\n});","QuestionDescription":"Friends of friends - who knows who? Next friend You're done! Click the \"Next\" button on the botto...","DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"\/>\n  <title>Friends | of <\/title>\n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.side-quest.com\/friendlyocean\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n<\/head>\n\n<body>\n<h2>Friends of friends - who knows who?<\/h2>\n\n<div id=\"buttonsDiv\" class = \"buttonsDiv\" >\n\n\n  <button id=\"nextFriend\" type=\"button\" class = \"nextFriend\" style=\"float: right;\">Next friend<\/button>\n<\/div>\n<div id=\"mynetwork\" ><\/div>\n\n<div id=\"done\" class = \"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n<\/div>","DataExportTag":"Q24","QuestionID":"QID24"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID9","SecondaryAttribute":"Instructions After you have moved everyone to ${e:\/\/Field\/networkName},\u00a0 you will then decide how..","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions<\/strong><br>\n<br>After you have moved everyone to ${e:\/\/Field\/networkName},&nbsp; you will then decide how much space they get based on how close you are to them.<div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions After you have moved everyone to ${e:\/\/Field\/networkName},\u00a0 you will then decide how...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<strong>Instructions<\/strong><br>\n<br>After you have moved everyone to ${q:\/\/QID5\/ChoiceTextEntryValue}, you will then decide how much space they get based on how close you are to them.<div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div><div><br><\/div><div><br><\/div><div><br><\/div>","DataExportTag":"Q9","QuestionID":"QID9"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID7","SecondaryAttribute":"Instructions \u00a0 During the game, you will be asked to enter the names of your family, friends, and..","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions &nbsp; <\/strong><br>\n<br>\nDuring the game, you will be asked to enter the names of your family, friends, and acquaintances who you interact with on a normal basis and know personally.\n<div><br><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions \u00a0 During the game, you will be asked to enter the names of your family, friends, and...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<strong>Instructions &nbsp; <\/strong><br>\n<br>\nDuring the game, you will be asked to enter the names of your family, friends, and acquaintances who you interact with on a normal basis and know personally.\n<div><br><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div>","DataExportTag":"Q7","QuestionID":"QID7"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID8","SecondaryAttribute":"Instructions \u00a0 Each of your personal relationships will get its own piece of your universe. In or..","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions &nbsp; <\/strong><br>\n<br>\nEach of your personal relationships will get its own piece of your universe.\n<div>In order for you to create the most complete universe, you will bring people over in 6 different groups:<\/div>\n\n<ul>\n\t<li>Family<\/li>\n\t<li>Friends<\/li>\n\t<li>Calling<\/li>\n\t<li>Texting<\/li>\n\t<li>Face To Face<\/li>\n\t<li>Social media (i.e. Facebook, Instagram, Snapchat)<\/li>\n<\/ul>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div><div><br><\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions \u00a0 Each of your personal relationships will get its own piece of your universe. In or...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText_Unsafe":"<strong>Instructions &nbsp; <\/strong><br>\n<br>\nEach of your personal relationships will get its own piece of your universe.\n<div>In order for you to create the most complete universe, you will bring people over in 6 different groups:<\/div>\n\n<ul>\n\t<li>Family<\/li>\n\t<li>Friends<\/li>\n\t<li>Calling<\/li>\n\t<li>Texting<\/li>\n\t<li>Face To Face<\/li>\n\t<li>Social media (i.e. Facebook, Instagram, Snapchat)<\/li>\n<\/ul>\n\n<div>&nbsp;<\/div>\n\n<div>&nbsp;<\/div><div><br><\/div>","DataExportTag":"Q8","QuestionID":"QID8"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID19","SecondaryAttribute":"Instructions \u00a0 OK, time to disembark. However, before getting off the spaceship, we need to get a..","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions<\/strong>\n<div>&nbsp;<\/div>\n\n<div>OK, time to disembark. However, before getting off the spaceship, we need to get an accurate head count. We know that sometimes you communicate with the same person via multiple channels. For example, maybe you text your mother and talk to her on the phone.<br>\n<br>\nPlease carefully go over this list and find any matches. To do so, go through your friends one by one by clicking \"Next friend\", and drag the duplicated names to the right side.&nbsp; After you're done, click the --&gt; at the bottom right of the page to continue the survey.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions \u00a0 OK, time to disembark. However, before getting off the spaceship, we need to get a...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<strong>Instructions<\/strong>\n<div>&nbsp;<\/div>\n\n<div>OK, time to disembark. However, before getting off the spaceship, we need to get an accurate head count. We know that sometimes you communicate with the same person via multiple channels. For example, maybe you text your mother and talk to her on the phone.<br>\n<br>\nPlease carefully go over this list and find any matches. To do so, go through your friends one by one by clicking \"Next friend\", and drag the duplicated names to the right side.&nbsp; After you're done, click the --&gt; at the bottom right of the page to continue the survey.<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;<\/div>","DataExportTag":"Q19","QuestionID":"QID19"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID23","SecondaryAttribute":"Instructions Finally, put your friends who know each other together in the same place. For each f...","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions<\/strong><br>\n<br>\nFinally, put your friends who know each other together in the same place. For each friend, find the people who know that friend and drag their planets to the left side, and find the people who don't know that friend and drag their planets to the right side.&nbsp;\n<div>&nbsp;<\/div>\n\n<div>Once you have done this for all your friends, click the \"Next\" button at the bottom right of this page to continue.\n<div>&nbsp;<\/div>\n<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions Finally, put your friends who know each other together in the same place. For each f...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":10,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<strong>Instructions<\/strong><br>\n<br>\nFinally, put your friends who know each other together in the same place. For each friend, find the people who know that friend and drag their planets to the left side, and find the people who don't know that friend and drag their planets to the right side.&nbsp;\n<div>&nbsp;<\/div>\n\n<div>Once you have done this for all your friends, click the \"Next\" button at the bottom right of this page to continue.\n<div>&nbsp;<\/div>\n<\/div>","DataExportTag":"Q23","QuestionID":"QID23"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID21","SecondaryAttribute":"Instructions\u00a0 \u00a0 Please rate how emotionally close you are with each person by dragging their name.","TertiaryAttribute":null,"Payload":{"QuestionText":"<strong>Instructions<\/strong>&nbsp;\n<div>&nbsp;<\/div>\n\n<div>Please rate how emotionally close you are with each person by dragging their name to the orbits. You can rate them from not at all close (perimeter) to extremely close (center).<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;&nbsp;<\/div>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Instructions\u00a0 \u00a0 Please rate how emotionally close you are with each person by dragging their name...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"Graphics":"IM_elc2Sj1GU7Nfob3","GraphicsDescription":"Screen shot 2019 03 22 at 1.48.03 pm","DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<strong>Instructions<\/strong>&nbsp;\n<div>&nbsp;<\/div>\n\n<div>Please rate how emotionally close you are with each person by dragging their name to the orbits. You can rate them from not at all close (perimeter) to extremely close (center).<\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div><br><\/div><div>&nbsp;&nbsp;<\/div>","DataExportTag":"Q21","QuestionID":"QID21"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID22","SecondaryAttribute":"node label extremely close very close close somewhat close not very close not close not at all cl...","TertiaryAttribute":null,"Payload":{"QuestionText":"<title>Network | Manipulation<\/title>\n\n  \n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n\n<link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n<script type=\"text\/javascript\" src=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis.js\"><\/script>\n<link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  \n\n<div id=\"network-popUp\">\n  <span id=\"operation\">node<\/span> <br>\n  <input type=\"hidden\" id=\"node-id\" value=\"new value\">\n  <table style=\"margin:auto;\">\n    <tbody><tr>\n      <td>label<\/td><td><input id=\"node-label\" value=\"new value\"><\/td>\n    <\/tr><\/tbody><\/table>\n  <input type=\"button\" value=\"save\" id=\"saveButton\">\n<\/div>\n\n<div id=\"radius_labels\" class=\"radiusLabel_class\">\n  <div id=\"label1\" class=\"labels\">extremely <br> close<\/div>\n  <div id=\"label2\" class=\"labels\">very <br>close<\/div>\n  <div id=\"label3\" class=\"labels\">close<\/div>\n  <div id=\"label4\" class=\"labels\">somewhat <br>close<\/div>\n  <div id=\"label5\" class=\"labels\">not <br>very close<\/div>\n  <div id=\"label6\" class=\"labels\">not  <br>close<\/div>\n  <div id=\"label7\" class=\"labels\">not at all<br>close<\/div>\n<\/div>\n\n<br>\n\n<div id=\"mynetwork\"><\/div>\n\n<div id=\"instruction_intro\" class=\"overlay\">\n  \n This is your universe. Please rate how emotionally close you are with each person by dragging their names onto lines of orbits. Click \"Next\" to continue. <br> <input type=\"button\" value=\"Next\" id=\"nextStep_intro\" class=\"overlayButton\"> \n\n<\/div>\n\n<div id=\"instruction\" class=\"overlay\">\n  \n First, let's edit the planets. You may notice that some people have more than one planet. You can click on the duplicate planets, and then click on \"Delete selected planet\" on the top right corner to remove them. <br><input type=\"button\" value=\"Next\" id=\"nextStep_node\" class=\"overlayButton\"> \n  \n<\/div>\n  \n<div id=\"instruction2\" class=\"overlay\">\n  Now let's connect the people who personally know each other. To do so, drag from one planet to another.  <br> <input type=\"button\" value=\"Next\" id=\"nextStep_edge\" class=\"overlayButton\">\n\n<\/div>\n\n<div id=\"instruction5\" class=\"overlay\">\n  We have already connected your family members. If some of them do not know each other, select the connection and then click on \"Delete selected connection\" on the top right corner.<br> <input type=\"button\" value=\"Next\" id=\"nextStep_edge1\" class=\"overlayButton\">\n\n<\/div>\n\n<div id=\"instruction3\" class=\"overlay\">\n  \nDrag the planets to the lines of orbits around the sun based on how close you are to that person. The closer the planet is to the sun, the closer you are to the person. <br> <input type=\"button\" value=\"Next\" id=\"nextStep_orbit\" class=\"overlayButton\"> \n\n<\/div>\n\n<div id=\"instruction4\" class=\"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n <input type=\"button\" value=\"Done\" id=\"done\" class=\"overlayButton\">\n\n<\/div>","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function(){\n\n  $(document).ready(function() {\n\t  \/\/Closeness variables\n\t  \n\tvar USE_QUALTRICS =1;\n  \n  var isClosenessMode = false;\n  var hiddenEdgeData = new vis.DataSet({});\n  var arcRadiuses = [100,200,300,400,500,600,700,800];\n  var dragRadius = 0;\n  var canvasHeight;\n  var canvasWidth;\n  var wasDragging = false;\n  var oldPosition;\n  \n  var edgesJSON = null;\n  var nodes;\n  var nodeArray;\n  var edges;\n  var network = null;\n  var lastScale = 1.0;\n  var gravityConstant = 1.0;\n  \n  var data;\n  var seed = 2;\n  var edgeMode = true;\n      \n  function destroy() {\n  \tif (network !== null) {\n          network.destroy();\n          network = null;\n  }}\n  \n  String.prototype.replaceAll = function(str1, str2, ignore) \n{\n    return this.replace(new RegExp(str1.replace(\/([\\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])\/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(\/\\$\/g,\"$$$$\"):str2);\n} \n  \n  function draw() {\n  \tdestroy();\n  \tnodes = new vis.DataSet({});\n  \tedges = new vis.DataSet({});\n          \n\tif (USE_QUALTRICS)\n\t{\n     var nodeString = '${e:\/\/Field\/nodes}';\n     window.dataTest = nodeString;\n\t}\n\telse\n\t{\n\t  var nodeString = \"[{'id':0,'label':'Jaime','group':1},{'id':1,'label':'Cercei','group':1},{'id':2,'label':'Tyrion','group':1},{'id':3,'label':'Joffrey','group':1},{'id':4,'label':'Sansa','group':2},{'id':5,'label':'Arya','group':2}, {'id':6,'label':'Bran','group':2}, {'id':7,'label':'Tony','group':2},{'id':13,'label':'Margery','group':5}]\";\n\t}\n\t\n\tnodeArray = JSON.parse(nodeString.replaceAll(\"'\", '\"'))\n\t\n\tfor (var i = 0; i < nodeArray.length; i++) {\n\t  nodes.add([\n\t    {id: i, label: nodeArray[i].label, group: nodeArray[i].group}]);\n        }\n      \n        \/\/ create a network\n        var container = document.getElementById('mynetwork');\n        var options = {\n          locale: 'en',\n          height:'600px',\n          width:'800px',\n  \t\t\"interaction\": {\"dragView\": false, \"zoomView\": false},\n  \t\t\"physics\": {\"maxVelocity\": 10,\n  \t\t\t\"barnesHut\": {\"gravitationalConstant\": -2000, \"damping\":0.3, \"centralGravity\":gravityConstant, \"avoidOverlap\":0.01}},\n          autoResize:false,\n  \t      layout: {randomSeed:seed}, \/\/ just to make sure the layout is the same when the locale is changed\n  \t      manipulation: {\n  \t        enabled: false,\n  \t        initiallyActive: false,\n  \t        addNode: function (data, callback) {\n  \t\t      \/\/ filling in the popup DOM elements\n  \t\t      document.getElementById('operation').innerHTML = \"Add Node\";\n  \t\t      document.getElementById('node-id').value = data.id;\n  \t\t      document.getElementById('node-label').value = data.label;\n  \t\t      document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);\n  \t\t      document.getElementById('network-popUp').style.display = 'block';\n  \t  \n  \t\t      jQuery(\"#node-label\").focus();\n  \t\t      jQuery(\"#node-label\").on('keyup', function (e) {\n  \t\t\t      if (e.keyCode == 13) {\n  \t\t\t\t    jQuery('#saveButton').click();\n  \t\t\t       }\n  \t\t      });\n  \t      },\n  \t      editNode: function (data, callback) {\n  \t\t    \/\/ filling in the popup DOM elements\n  \t\t    document.getElementById('operation').innerHTML = \"Edit Node\";\n  \t\t    document.getElementById('node-id').value = data.id;\n  \t\t    document.getElementById('node-label').value = data.label;\n  \t\t    document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);\n  \t\t    document.getElementById('network-popUp').style.display = 'block';\n  \t\t\n  \t\t    jQuery(\"#node-label\").focus();\n  \t\t    jQuery(\"#node-label\").on('keyup', function (e) {\n  \t\t\t  if (e.keyCode == 13) {\n  \t\t\t\t  jQuery('#saveButton').click();\n  \t\t\t  }\n  \t\t  });\n  \t  },\n  \t  addEdge: function (data, callback) {\t\t\n  \t\tsimilarEdges = edges.get({filter : function (edgeData){\n  \t\t\treturn (edgeData.from == data.from && edgeData.to == data.to) || \n  \t\t\t(edgeData.from == data.to && edgeData.to == data.from);\n  \t\t}});\n  \t\t\n  \t\tif (similarEdges.length == 0 && data.from != data.to) {\n  \t\t  callback(data);\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tcallback(null);\n  \t\t}\n  \t\t\n  \t\tdrawUI();\n  \t  }\n  \t}\n    };\n    \n    data = { nodes:nodes, edges:edges };\n    network = new vis.Network(container, data, options);\n    \n    network.on('beforeDrawing', drawBefore);\n    \n    network.on('dragging', doDragging);\n    network.on('dragStart', doDragStart);\n    network.on('dragEnd', doDragOver);\n    \n    network.on('hold', function (networkData){\n  \tif (!edgeMode && !isClosenessMode)\n  \t{\n  \t\tif (networkData.edges.length == 0 && networkData.nodes.length == 0)\n  \t\t{\n  \t\t  var updatedIds = nodes.add([{\n  \t\t\t  label:'new',\n  \t\t\t  shadow: {enabled: true, color: 'rgba(255, 0, 0, 1)', x : 0, y : 0},\n  \t\t\t  x:networkData.pointer.canvas.x,\n  \t\t\t  y:networkData.pointer.canvas.y\n  \t\t  }]);\n  \t\t  network.selectNodes([updatedIds[0]]);\n  \t\t  network.editNode();\n  \t\t}\n  \t\telse if (networkData.nodes.length > 0)\n  \t\t{\n  \t\t\tnetwork.editNode();\n  \t\t}\n  \t}\n    });\n  }\n  \n  function clearPopUp() {\n    document.getElementById('saveButton').onclick = null;\n    document.getElementById('network-popUp').style.display = 'none';\n  }\n  \n  function saveData(data,callback) {\t\t\n    data.id = document.getElementById('node-id').value;\n    data.label = document.getElementById('node-label').value;\n    clearPopUp();\n    callback(data);\n  }\n  \n  function init() {\n    draw();\n    editNodeMode();\n  }\n  \n  function drawUI()\n  {\t\t\n  \tif (isClosenessMode)\n  \t{\n  \t\tdrawUICloseness();\n  \t\tjQuery(\"#deleteItem\").html(\"Delete selected planet\");\n      \tjQuery(\"#editNode\").attr(\"class\", \"tabUnselected\");\n      \tjQuery(\"#editConnection\").attr(\"class\", \"tabUnselected\");\n      \tjQuery(\"#editCloseness\").attr(\"class\", \"tabSelected\");\n\n      \n  \t}\n  \telse\n  \t{\n  \t\tif (edgeMode)\n  \t\t{\n  \t\t\tnetwork.addEdgeMode();\n  \t\t\tjQuery(\"#deleteItem\").html(\"Delete selected connection\");\n  \t\t\tjQuery(\"#editNode\").attr(\"class\", \"tabUnselected\");\n        \tjQuery(\"#editConnection\").attr(\"class\", \"tabSelected\");\n        \tjQuery(\"#editCloseness\").attr(\"class\", \"tabUnselected\");\n  \t\t}\n  \t\telse\n  \t\t{\t\n  \t\t\tnetwork.disableEditMode();\n  \t\t\tjQuery(\"#deleteItem\").html(\"Delete selected planet\");\t\t\n        \tjQuery(\"#editNode\").attr(\"class\", \"tabSelected\");\n        \tjQuery(\"#editConnection\").attr(\"class\", \"tabUnselected\");\n        \tjQuery(\"#editCloseness\").attr(\"class\", \"tabUnselected\");\n        \n  \t\t}\n  \t}\n  \t\n  \tif (edgeMode)\n  \t{\n  \t\tedges.forEach(function (data) {\n  \t\t\tedges.update({id: data.id, shadow: {enabled: true, color: 'rgba(255, 255, 100, 50)', x : 0, y : 0}});\n  \t\t});\n  \t\tnodes.forEach(function (data) {\n  \t\t\tnodes.update({id: data.id, shadow: {enabled: false}});\n  \t\t});\n  \t}\n  \telse\n  \t{\n  \t\tedges.forEach(function (data) {\n  \t\t\tedges.update({id: data.id, shadow: {enabled: false}});\n  \t\t});\n  \t\tnodes.forEach(function (data) {\n  \t\t\tnodes.update({id: data.id, shadow: {enabled: true, color: 'rgba(255, 255, 100, 50)', x : 0, y : 0}});\n  \t\t});\n  \t}\n\tif (USE_QUALTRICS)\n\t{\n\t\tupdateQualtricsData();\n\t}\n  }\n  \n  function editNodeMode()\n  {\n    edgeMode = false;\n    if (isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    drawUI();\n  }\n  \n  function editEdgeMode()\n  {\n    edgeMode = true;\n    if (isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    drawUI();\n  }\n  \n  function toggleEdgeMode()\n  {\n  \tedgeMode = !edgeMode;\n  \t\n  \tdrawUI();\t\n  \t\n  }\n  \n  function deleteItem()\n  {\n  \tif (!edgeMode)\n  \t{\n  \t\tif (network.getSelectedNodes().length > 0)\n  \t\t{\n  \t\t\tnetwork.deleteSelected();\n  \t\t}\n  \t}\n  \telse\n  \t{\n  \t\tif (network.getSelectedNodes().length == 0)\n  \t\t{\n  \t\t\tnetwork.deleteSelected();\n  \t\t}\n  \t}\n  \tdrawUI();\n  \t\n  }\n  \n  function updateQualtricsData(){\n    edgesJSON = JSON.stringify(edges.get({fields: ['to', 'from']})).replaceAll('\"',\"'\");\n    nodesJSON = JSON.stringify(nodes.get({fields: ['id', 'label', 'closeness']})).replaceAll('\"',\"'\");\n      \n\tQualtrics.SurveyEngine.setEmbeddedData('edges', edgesJSON);\n    Qualtrics.SurveyEngine.setEmbeddedData('nodes', nodesJSON);\n  }\n  \n  function nextStep_intro(){\n    jQuery(\"#instruction_intro\").remove();\n    jQuery(\"#instruction\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction\").css(\"display\", \"block\");\n    editNodeMode();\n  }\n  \n  function nextStep_node(){\n    jQuery(\"#instruction\").remove();\n    jQuery(\"#instruction2\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction2\").css(\"display\", \"block\");\n    editEdgeMode();\n  }\n  \n  function nextStep_edge(){\n    jQuery(\"#instruction2\").remove();\n    jQuery(\"#instruction5\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction5\").css(\"display\", \"block\");\n    editEdgeMode();\n  }\n\n  function nextStep_edge1(){\n    jQuery(\"#instruction_intro\").remove();\n    jQuery(\"#instruction3\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction3\").css(\"display\", \"block\");\n    editClosenessMode();\n  }\n  \n  function nextStep_orbit(){\n    if (checkAllCloseness()){\n      jQuery(\"#instruction3\").remove();\n      jQuery(\"#instruction4\").detach().appendTo(\"#mynetwork\");  \n      jQuery(\"#instruction4\").css(\"display\", \"block\");\n      editNodeMode();\n    } else {\n      alert(\"You must assign all planets to the orbits before you can continue.\");\n    }\n      \n  }\n  \n  function done(){\n    jQuery(\"#instruction4\").remove();\n\t  $('#NextButton').show();\n  }\n  \n  init();\n  \n  jQuery(\"#instruction_intro\").detach().appendTo(\"#mynetwork\");\n  jQuery(\"#instruction_intro\").css(\"display\", \"block\");\n  jQuery(\"#radius_labels\").detach().appendTo(\"#mynetwork\");  \n\n  \n  jQuery('#editNode').click(editClosenessMode);\n\n  jQuery('#nextStep_intro').click(nextStep_edge1);\n  jQuery('#nextStep_edge1').click(nextStep_edge1);\n  jQuery('#nextStep_orbit').click(nextStep_orbit);\n  jQuery('#done').click(done);\n  \n  \n  \/\/Closeness stuff\n  function drawBefore(context)\n  {\n  \tcanvasHeight = context.canvas.clientHeight;\n  \tcanvasWidth = context.canvas.clientWidth;\n  \t\n  \tif (!wasDragging && !isClosenessMode)\n  \t{\n  \t\tminScale = 1.0;\n  \t\tnodes.forEach(function (data) {\n  \t\t\tpositionData = network.getPositions([data.id])[data.id];\n  \t\t\tDOMPosition = network.canvasToDOM(positionData);\n  \t\t\tDOMOffset = {\"x\": Math.abs(DOMPosition.x - canvasWidth\/2), \"y\": Math.abs(DOMPosition.y - canvasHeight\/2)};\n  \t\t\tcanvasOffset = {\"x\": DOMOffset.x \/ network.getScale(), \"y\": DOMOffset.y \/ network.getScale()};\n  \t\t\t\n  \t\t\tminScale = Math.min(minScale, canvasWidth\/canvasOffset.x\/2.5);\n  \t\t\tminScale = Math.min(minScale, canvasHeight\/canvasOffset.y\/2.5);\n  \t\t});\n  \t\t\n  \t\tminScale = Math.max(0.4, minScale);\n  \t\t\n  \t\tif (Math.abs(minScale - lastScale) > 0.000001)\n  \t\t{\n  \t\t\tnetwork.moveTo({\"scale\": network.getScale(), \"animation\": false, \"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\t\tnetwork.moveTo({\"scale\": minScale, \"animation\": {\"duration\": 2000.0, \"easingFunction\": 'easeInOutCubic'}, \"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\t\t\n  \t\t\tlastScale = minScale;\n  \t\t\t\n  \t\t\t\/\/network.startSimulation();\n  \t\t}\n  \t}\n  \t\n  \t\/\/network.moveTo({\"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\n  \tif (isClosenessMode)\n  \t{\n\n  \t\tfor (var radius = 0; radius < arcRadiuses.length; radius++)\n  \t\t{\n  \t\t\tcontext.beginPath();\n  \t\t\t\n  \t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\n  \t\t\tif (radius == 0)\n  \t\t\t{\n  \t\t\t\tcontext.arc(circleCenter.x, circleCenter.y, arcRadiuses[radius]\/ network.getScale(), 0, 2 * Math.PI, true);\n  \t\t\t\tcontext.fillStyle = \"#FFFF55\";\n  \t\t\t\tcontext.globalAlpha = 0.5;\n  \t\t\t\tcontext.fill();\n  \t\t\t}\n  \t\t\telse\n  \t\t\t{\n  \t\t\t\tvar isDraggedOn = Math.abs(arcRadiuses[radius] - dragRadius) < 50;\n  \t\t\t\t\n  \t\t\t\tcontext.arc(circleCenter.x, circleCenter.y, arcRadiuses[radius] \/ network.getScale(), 0, 2 * Math.PI, true);\n  \t\t\t\tcontext.strokeStyle = \"#FFFF55\";\n  \t\t\t\tif (wasDragging == null || !isDraggedOn)\n  \t\t\t\t{\n  \t\t\t\t\tcontext.globalAlpha = 0.5;\n  \t\t\t\t\tcontext.setLineDash([5 \/ network.getScale(), 15 \/ network.getScale()]);\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\tcontext.globalAlpha = 1;\n  \t\t\t\t\tcontext.setLineDash([]);\n  \t\t\t\t}\n  \t\t\t\tcontext.stroke();\t\t\t\t\n  \t\t\t}\n  \t\t\t\n  \t\t\t\/\/context.endPath();\n  \t\t}\n  \t\t\n  \t\tcontext.setLineDash([]);\n  \t\tcontext.globalAlpha = 1;\n  \t\t\n  \t\tnodes.forEach(function (data) {\n  \t\t\tif ('radius' in data && wasDragging != data.id)\n  \t\t\t{\n  \t\t\t\tpositionData = network.getPositions([data.id])[data.id];\n  \t\t\t\t\n  \t\t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\tpointer = {\"x\": positionData.x, \"y\":positionData.y};\n  \t\t\t\t\n  \t\t\t\tangle = Math.atan2(pointer.y - circleCenter.y, pointer.x - circleCenter.x);\n  \t\t\t\t\n  \t\t\t\ttargetAngle = angle + 0.3*(data.angle - angle);\n  \t\t\t\t\n  \t\t\t\ttargetX = circleCenter.x + data.radius \/ network.getScale()*Math.cos(targetAngle);\n  \t\t\t\ttargetY = circleCenter.y + data.radius \/ network.getScale()*Math.sin(targetAngle);\t\n  \t\t\t\t\n  \t\t\t\tmovePositionX = pointer.x + 0.01*(targetX - positionData.x);\n  \t\t\t\tmovePositionY = pointer.y + 0.01*(targetY - positionData.y);\n  \t\t\t\t\n  \t\t\t\tnetwork.moveNode(data.id, targetX, targetY);\n  \t\t\t\t\n  \t\t\t}\n  \t\t});\n  \t\t\n  \t}\n  }\n  \n  function getDistance(x, y)\n  {\n  \treturn Math.sqrt(Math.pow(x,2) + Math.pow(y,2));\n  }\n  \n  function doDragging(data)\n  {\n\n  \tif (data.nodes.length > 0)\n  \t{\n  \t\twasDragging = data.nodes[0];\n  \t\t\n  \t\tif (isClosenessMode)\n  \t\t{\n  \t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\n  \t\t\tdragRadius = Math.sqrt(Math.pow(data.pointer.canvas.x - circleCenter.x, 2) + Math.pow(data.pointer.canvas.y - circleCenter.y, 2)) * network.getScale();\n  \t\t\t\n  \t\t}\n  \t}\n  }\n  \n  function getBestRadius(x, y)\n  {\n  \t\/\/Inputs in DOM space\n  \t\n  \tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \tpointer = network.DOMtoCanvas({\"x\": x, \"y\":y});\n  \t\n  \tfor (var radius in arcRadiuses)\n  \t{\n  \t\tif (radius == 0)\n  \t\t{\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tthisDragRadius = Math.sqrt(Math.pow(pointer.x - circleCenter.x, 2) + Math.pow(pointer.y - circleCenter.y, 2)) * network.getScale();\n  \t\t\n  \t\t\tif (Math.abs(arcRadiuses[radius] - thisDragRadius) < 50)\n  \t\t\t{\n  \t\t\t\treturn radius;\n  \t\t\t}\t\t\t\t\n  \t\t}\n  \t}\n  \t\n  \treturn -1;\n  }\n  \n  function doDragStart(data)\n  {\n  \tif (isClosenessMode && data.nodes.length > 0)\n  \t{\n  \t\tpositionData = network.getPositions([data.nodes[0]])[data.nodes[0]];\n  \t\t\n  \t\toldPosition = {\"x\": positionData.x, \"y\": positionData.y};\n  \t}\n  }\n  \n  function doDragOver(data)\n  {\n  \tif (isClosenessMode && data.nodes.length > 0)\n  \t{\n  \t\tedgePadding = 50;\n  \t\t\n  \t\tbestRadius = getBestRadius(data.pointer.DOM.x, data.pointer.DOM.y);\n  \t  \n  \t\tpointerX = Math.max(Math.min(data.pointer.DOM.x, -edgePadding + canvasWidth), edgePadding);\n  \t\tpointerY = Math.max(Math.min(data.pointer.DOM.y, -edgePadding + canvasHeight), edgePadding);\n  \t\t\t\t\n  \t\tpointer = network.DOMtoCanvas({\"x\": pointerX, \"y\": pointerY});\n  \t\tcircleCenter = network.DOMtoCanvas({\"x\": 0, \"y\": canvasHeight});\n  \t\t\n  \t\tif (bestRadius > 0)\n  \t\t{\n  \t\t\tnewRadius = arcRadiuses[bestRadius];\n  \t\t\tangle = Math.atan2(pointer.y - circleCenter.y, pointer.x - circleCenter.x);\n  \t\t\t\n  \t\t\tminAngle = -Math.acos((canvasWidth - edgePadding) \/ newRadius);\t\t\t\n  \t\t\tmaxAngle = -Math.asin((canvasHeight - edgePadding) \/ newRadius);\t\n  \n  \t\t\tif (!isNaN(maxAngle))\n  \t\t\t{\n  \t\t\t\tangle = Math.max(maxAngle, angle);\n  \t\t\t}\n  \t\t\tif (!isNaN(minAngle))\n  \t\t\t{\n  \t\t\t\tangle = Math.min(minAngle, angle);\n  \t\t\t}\n  \t\t\t\t\t\t\n  \t\t\tnewX = circleCenter.x + newRadius*Math.cos(angle);\n  \t\t\tnewY = circleCenter.y + newRadius*Math.sin(angle);\t\t\n  \t\t\t\n  \t\t\tnodes.update({'id' : data.nodes[0], 'x' : newX, 'y' : newY, 'radius': newRadius, 'angle': angle, 'closeness': bestRadius,group:999});\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tnetwork.moveNode(data.nodes[0], oldPosition.x, oldPosition.y);\n  \t\t}\n  \t}\n  \t\n  \twasDragging = null;\n  }\n  \n  function checkAllCloseness()\n  {\n    var nodeList = nodes.get({fields: ['id', 'label', 'closeness']});\n    var allHaveCloseness = true;\n    var failID = -1;\n    \n    for (var i = 0; i < nodeList.length; i++)\n    {\n      if (!('closeness' in nodeList[i]))\n      {\n        allHaveCloseness = false;\n        failID = i;\n        break;\n      }\n    }\n    \n    if (!allHaveCloseness)\n    {\n      \/\/alert(nodeList[failID]['label']);\n    }\n    return allHaveCloseness;\n  }\n  \n  function drawUICloseness()\n  {\n  \tnetwork.disableEditMode();\n  }\n  \n  function editClosenessMode()\n  {\n    if (!isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    edgeMode = false;\n  }\n  \n  function toggleClosenessMode()\n  {\n  \tif (!isClosenessMode)\n  \t{\n  \t\tedgeMap = edges.get();\n  \t\tfor (var i = 0; i < edgeMap.length; i++)\n  \t\t{\n\t\t\thiddenEdgeData.add(edgeMap[i]);\n  \t\t}\n  \t\tedges.clear();\n  \t\t\n  \t\tnetwork.setOptions({\"physics\": {\"maxVelocity\":1, \"barnesHut\": {\"centralGravity\":1.0,\"avoidOverlap\":0}}});\n  \t\t\n  \t\tjQuery(\".labels\").css(\"display\", \"block\");\n\n\n  \t\tisClosenessMode = true;\n  \t}\n  \telse\n  \t{\n  \t\tedgeMap = hiddenEdgeData.get();\n\n  \t\tfor (var i = 0; i < edgeMap.length; i++)\n  \t\t{\n\t\t\tedges.add(edgeMap[i]);\n  \t\t}\n  \t\thiddenEdgeData.clear();\n  \t\t\n  \t\tjQuery(\".labels\").css(\"display\", \"none\");\n\n  \t\tnetwork.setOptions({\"physics\": {\"maxVelocity\":10, \"barnesHut\": {\"centralGravity\":gravityConstant,\"avoidOverlap\":0.01}}});\n  \t\t\n  \t\tisClosenessMode = false;\n  \t\t\n  \t\tcheckAllCloseness(); \/\/DELETE ME\n  \t}\n  \t\n  \tdrawUI();\n  }\n  \n  \n  \n  \/\/ Their code goes below\n  \n  function loadJSON(path, success, error) {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n          success(JSON.parse(xhr.responseText));\n        }\n        else {\n          error(xhr);\n        }\n      }\n    };\n    xhr.open('GET', path, true);\n    xhr.send();\n  }\n  \n  \n  function getScaleFreeNetwork(nodeCount) {\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(Math.random() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n  \n        var from = i;\n        var to = j;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  }\n  \n  var randomSeed = 764; \/\/ Math.round(Math.random()*1000);\n  function seededRandom() {\n    var x = Math.sin(randomSeed++) * 10000;\n    return x - Math.floor(x);\n  }\n  \n  function getScaleFreeNetworkSeeded(nodeCount, seed) {\n    if (seed) {\n      randomSeed = Number(seed);\n    }\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n    var edgesId = 0;\n  \n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(seededRandom() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n  \n        var from = i;\n        var to = j;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  \n  }\n  \n  });\n});\n\n\nQualtrics.SurveyEngine.addOnReady(function()\n{\n\t\/*Place your JavaScript here to run when the page is fully displayed*\/\n\t$('#NextButton').hide();\n});","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"node label extremely close very close close somewhat close not very close not close not at all cl...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<title>Network | Manipulation<\/title>\n\n  \n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.side-quest.com\/friendlyocean\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  \n\n<div id=\"network-popUp\">\n  <span id=\"operation\">node<\/span> <br>\n  <input type=\"hidden\" id=\"node-id\" value=\"new value\">\n  <table style=\"margin:auto;\">\n    <tbody><tr>\n      <td>label<\/td><td><input id=\"node-label\" value=\"new value\"><\/td>\n    <\/tr><\/tbody><\/table>\n  <input type=\"button\" value=\"save\" id=\"saveButton\">\n<\/div>\n\n<div id=\"radius_labels\" class=\"radiusLabel_class\">\n  <div id=\"label1\" class=\"labels\">extremely <br> close<\/div>\n  <div id=\"label2\" class=\"labels\">very <br>close<\/div>\n  <div id=\"label3\" class=\"labels\">close<\/div>\n  <div id=\"label4\" class=\"labels\">somewhat <br>close<\/div>\n  <div id=\"label5\" class=\"labels\">not <br>very close<\/div>\n  <div id=\"label6\" class=\"labels\">not  <br>close<\/div>\n  <div id=\"label7\" class=\"labels\">not at all<br>close<\/div>\n<\/div>\n\n<br>\n\n<div id=\"mynetwork\"><\/div>\n\n<div id=\"instruction_intro\" class=\"overlay\">\n  \n This is your universe. Please rate how emotionally close you are with each person by dragging their name into the circle. <br> <input type=\"button\" value=\"Next\" id=\"nextStep_intro\" class=\"overlayButton\"> \n\n<\/div>\n\n<div id=\"instruction\" class=\"overlay\">\n  \n First, let's edit the planets. You may notice that some people have more than one planet. You can click on the duplicate planets, and then click on \"Delete selected planet\" on the top right corner to remove them. <br><input type=\"button\" value=\"Next\" id=\"nextStep_node\" class=\"overlayButton\"> \n  \n<\/div>\n  \n<div id=\"instruction2\" class=\"overlay\">\n  Now let's connect the people who personally know each other. To do so, drag from one planet to another.  <br> <input type=\"button\" value=\"Next\" id=\"nextStep_edge\" class=\"overlayButton\">\n\n<\/div>\n\n<div id=\"instruction5\" class=\"overlay\">\n  We have already connected your family members. If some of them do not know each other, select the connection and then click on \"Delete selected connection\" on the top right corner.<br> <input type=\"button\" value=\"Next\" id=\"nextStep_edge1\" class=\"overlayButton\">\n\n<\/div>\n\n<div id=\"instruction3\" class=\"overlay\">\n  \nDrag the planets to the orbits around the sun based on how close you are to that person. The closer the planet is to the sun, the closer you are to the person. <br> <input type=\"button\" value=\"Next\" id=\"nextStep_orbit\" class=\"overlayButton\"> \n\n<\/div>\n\n<div id=\"instruction4\" class=\"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n <input type=\"button\" value=\"Done\" id=\"done\" class=\"overlayButton\">\n\n<\/div>","DataExportTag":"Q22","QuestionID":"QID22"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID20","SecondaryAttribute":"Removing duplicated friends Next friend You're done! Click the \"Next\" button on the bottom right...","TertiaryAttribute":null,"Payload":{"QuestionText":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"\/>\n  <title>Removing duplicates <\/title>\n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n\n\n  <link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n\n<\/head>\n\n<body>\n<h2>Removing duplicated friends<\/h2>\n\n<div id=\"buttonsDiv\" class = \"buttonsDiv\" >\n\n\n  <button id=\"nextFriend\" type=\"button\" class = \"nextFriend\" style=\"float: right;\">Next friend<\/button>\n<\/div>\n<div id=\"mynetwork\" ><\/div>\n\n<div id=\"done\" class = \"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n<\/div>\n\n\n\n\n<\/body>\n<\/html>","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function(){\n\n  $(document).ready(function() {\n\t  \/\/Closeness variables\n\t  \n\tvar USE_QUALTRICS = 1;\n  \n  var canvasHeight;\n  var canvasWidth;\n  var wasDragging = false;\n  var oldPosition;\n  \n  var edgesJSON = null;\n  var nodes;\n  var updatedNodes;\n  var edges;\n  var network = null;\n  var lastScale = 1.0;\n  var gravityConstant = 1.0;\n  \n  var data;\n  var seed = 2;\n  var edgeMode = true;\n  var currentIdName = \"\";\n  var currentID = NaN; \/\/ is the INDEX of the person\n      \n  function destroy() {\n  \tif (network !== null) {\n          network.destroy();\n          network = null;\n  }}\n\t  \n\n\n  String.prototype.replaceAll = function(str1, str2, ignore) \n  {\n    return this.replace(new RegExp(str1.replace(\/([\\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])\/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(\/\\$\/g,\"$$$$\"):str2);\n  } \n\n  function removeSpace(arr) {\n      \/\/ remove the space elements in the family nodes\n      \tfor (var i = 0; i < arr.length; i++){ \n          if ( arr[i] == ' ' || arr[i] == '') { \n            arr.splice(i, 1); \n            i--; }}\n          return arr;\n        }\n        \n      var Util = function() {\n        };\n        \n    Util.getCombinations = function(array, size, start, initialStuff, output) {\n      \tif (initialStuff.length >= size) {\n                output.push(initialStuff);\n          } else {\n          \tvar i;\n          \tfor (i = start; i < array.length; ++i) {\n          \t\tUtil.getCombinations(array, size, i + 1, initialStuff.concat(array[i]), output);\n          \t}\n          }\n      };\n      \n    Util.getAllPossibleCombinations = function(array, size, output) {\n      \tUtil.getCombinations(array, size, 0, [], output);\n      };\n  \n  \n  function draw() {\n  \tdestroy();\n  \tnodes = new vis.DataSet({});\n  \tedges = new vis.DataSet({});\n          \n\t  if (USE_QUALTRICS)\n\t  {\n\t\tvar family = \"${e:\/\/Field\/family}\";\n\t\t  var friend = \"${e:\/\/Field\/friend}\";\n\t\tvar calling = \"${e:\/\/Field\/calling}\";\n\t\tvar texting = \"${e:\/\/Field\/texting}\";\n\t\tvar f2f = \"${e:\/\/Field\/f2f}\";\n\t\tvar social = \"${e:\/\/Field\/social}\";\n\t  }\n\t  else\n\t  {\n\t\tvar family = \"Jaime, Cersei, Tyrion, Joffrey\";\n\t\tvar friend = \"Sansa, Arya, Bran, Tony\";\n\t\tvar calling = \"Jaime2, Cersei2, Tyrion2, Joffrey2\";\n\t\tvar texting = \"Sansa2\";\n\t\tvar f2f = \"margery\";\n\t\tvar social = \"Cersei3\";\n\t  }\n\t  \n\t  var family_nodes = family.split(\",\");\n        \/\/ remove the space elements in the family nodes\n        family_nodes = removeSpace(family_nodes);\n        var familyLength = family_nodes.length;\n        var family_node_ids = Array.apply(null, Array(family_nodes.length)).map(function (_, i) {return i;});\n        \/\/var family_node_ids = [...Array(family_nodes.length).keys()];\n        for (var i = 0; i < familyLength; i++) {\n          nodes.add([\n            {id: i, label: family_nodes[i], group: 1}]);\n        }\n        \/\/add family edges\n        var output = [];\n        Util.getAllPossibleCombinations(family_node_ids, 2, output);\n        for (var i = 0; i < output.length; i++){\n          edges.add([{from: output[i][0], to: output[i][1]}]);\n        }\n  \n        var friend_nodes = friend.split(\",\");\n        friend_nodes = removeSpace(friend_nodes);\n        var friendLength = friend_nodes.length;\n        for (var j = 0; j < friendLength; j++) {\n          nodes.add([\n            {id: j + familyLength, label: friend_nodes[j], group: 2}]);\n        }\n        \n        var calling_nodes = calling.split(\",\");\n        calling_nodes = removeSpace(calling_nodes);\n        var callingLength = calling_nodes.length;\n        for (var k = 0; k < callingLength; k++) {\n          nodes.add([\n            {id: k + familyLength + friendLength, label: calling_nodes[k], group: 3 }]);\n        }\n        \n        var texting_nodes = texting.split(\",\");\n        texting_nodes = removeSpace(texting_nodes);\n        var textingLength = texting_nodes.length;\n        for (var l = 0; l < textingLength; l++) {\n          nodes.add([\n            {id: l + familyLength + friendLength + callingLength, label: texting_nodes[l], group: 4}]);\n        }\n        \n        var f2f_nodes = f2f.split(\",\");\n        f2f_nodes = removeSpace(f2f_nodes);\n        var f2fLength = f2f_nodes.length;\n        for (var j = 0; j < f2fLength; j++) {\n          nodes.add([\n            {id: j + familyLength + friendLength + callingLength + textingLength, label: f2f_nodes[j], group: 5}]);\n        }\n        \n        var social_nodes = social.split(\",\");\n        social_nodes = removeSpace(social_nodes);\n        var socialLength = social_nodes.length;\n        for (var m = 0; m < socialLength; m++) {\n          nodes.add([\n            {id: m + familyLength + friendLength + callingLength + textingLength + f2fLength, label: social_nodes[m], group: 6}]);\n        }\n\n  \tvar nodeCount = nodes.length;\n  \tupdatedNodes = nodes.get({fields: ['id', 'label', 'group']});\n\tnodesGroups = nodes.get({fields: ['id',  'group','closeness']});\n\n    currentID = 0;\n  \n    \/\/ defines two 'invisible nodes' for seperating purposes\n\t  nodes.add({\"id\":1000, \"label\":\"invisible1\",\"x\": -250, \"y\": 0,\"fixed\" : true, \"hidden\" : true, \"size\":1});\n    nodes.add({\"id\":1001, \"label\":\"invisible2\", \"x\": 250, \"y\": 0,\"fixed\" : true, \"hidden\" : true, \"size\":1});\n\n    initializePerson(0);\n        \/\/ create a network\n        var container = document.getElementById('mynetwork');\n        var options = {\n          locale: 'en',\n          height:'600px',\n          width:'800px',\n  \t\t\"interaction\": {\"dragView\": false, \"zoomView\": false, \"navigationButtons\": false},\n  \t\t\"physics\": {\"enabled\": true, \"maxVelocity\": 10,\n  \t\t\t\"barnesHut\": {\"gravitationalConstant\": -1000, \"damping\":0.5, \"centralGravity\": 0.01, \"avoidOverlap\":1}},\n          autoResize:false,\n  \t      layout: {randomSeed:seed}, \/\/ just to make sure the layout is the same when the locale is changed\n  \t      manipulation: {\n  \t        enabled: false,\n  \t        initiallyActive: false\n  \t\n    }};\n    \n    data = { nodes:nodes, edges:edges };\n    network = new vis.Network(container, data, options);\n    \n    network.on('beforeDrawing', drawBefore);\n    network.on('dragging', doDragging);\n    network.on('dragStart', doDragStart);\n    network.on('dragEnd', doDragOver);\n    \n    network.moveNode(1000, -250, 0);\n    network.moveNode(1001, 250, 0);\n  }\n  \n  function initializePerson(newID){\n    currentID = newID;\n    currentIdName = nodes.get(currentID).label;\n     \/\/ get the currentID's connections\n    var connected = [];\n    edges.clear();\n\n\n    for (var j = 0; j < nodes.length; j++) {\n      if (j != currentID && nodes.get(j) && checkNodeInArray(updatedNodes, nodes.get()[j].id)){\n        nodes.update({id: j, hidden: false});\n        edges.add({\n            id: j,\n            from: j,\n            to: 1000,\n            hidden: false,\n            smooth:false,\n            length: 1\n            });\n        } else if (j == currentID) {\n        nodes.update({id: j, hidden: true});\n      }else if (!checkNodeInArray(updatedNodes, nodes.get()[j].id) && nodes.get(j)){\n        nodes.update({id: j, hidden: true});\n      }\n      }\n  }\n  \n  function nextPerson(){\n    if (nodes.get(currentID + 1) && checkNodeInArray(updatedNodes, currentID+1))\n    {\n       initializePerson(currentID + 1);\n    } else if (nodes.get(currentID + 1) && !checkNodeInArray(updatedNodes, currentID+1)){\n      currentID += 1;\n      nextPerson();\n    } else {\n      jQuery(\"#done\").detach().appendTo(\"#mynetwork\");  \n      jQuery(\"#done\").css(\"display\", \"block\");\n      jQuery(\"#nextFriend\").css(\"display\", \"none\");\n\t $('#NextButton').show();\n\n\n    if (USE_QUALTRICS)\n    {\n\t\t  updateQualtricsData();\n\t  }\n\n    }\n  }\n  \n\n  function findNodeArrayIndex(nodeArray, nodeID){\n      var nodeIndex = NaN;\n      for (var i = 0; i < nodeArray.length; i++) {\n        if (nodeArray[i].id == nodeID){\n        nodeIndex = i;\n        break;\n      }\n      } \n      return nodeIndex;\n    }\n    \n  function checkNodeInArray(nodeArray, nodeID){\n    var result = false;\n    for (var i = 0; i < nodeArray.length; i++) {\n        if (nodeArray[i].id == nodeID){\n          result = true;\n          break;\n        }\n      }\n    return result;\n  }\n  \n  function getNames(nodeArray){\n    var names = [];\n    for (var i = 0; i < nodeArray.length; i++) {\n      names.push(nodeArray[i].label);\n      }\n    return names;\n  }\n    \n  function findEdgeIndex(edgeArray, nodeID1, nodeID2){\n      var edgeIndex = NaN;\n      for (var i = 0; i < edgeArray.length; i++) {\n        if (edgeArray[i].from == nodeID1 && edgeArray[i].to == nodeID2){\n        edgeIndex = i;\n        break;\n        } else if (edgeArray[i].to == nodeID1 && edgeArray[i].from == nodeID2){\n        edgeIndex = i;\n        break;\n        }\n      } \n      return edgeIndex;\n    }\n    \n  \n  function saveData(data,callback) {\t\t\n    data.id = document.getElementById('node-id').value;\n    data.label = document.getElementById('node-label').value;\n    clearPopUp();\n    callback(data);\n  }\n  \n  function init() {\n    draw();\n  }\n  \n  function updateQualtricsData(){\n  \tQualtrics.SurveyEngine.setEmbeddedData('nodes', JSON.stringify(updatedNodes));  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('groups', JSON.stringify(nodesGroups));  \t\n\n  }\n  \n  function getDistance(x, y)\n  {\n  \treturn Math.sqrt(Math.pow(x,2) + Math.pow(y,2));\n  }\n  \n  function doDragging(data)\n  {\n\n  \tif (data.nodes.length > 0)\n  \t{\n  \t\twasDragging = data.nodes[0];\n  \t\n  \t}\n  }\n  \n  function doDragStart(data)\n  {\n  }\n  \n  \/\/ function to drag people between connected and unconnected\n  function doDragOver(data)\n  {\n    if (data.pointer.canvas.x < 0)\n    {\n    edges.update({\n         id: data.nodes[0],\n          from: data.nodes[0],\n          to: 1000,\n          hidden: false,\n          smooth:false\n      });\n    }\n    else\n    {\n      updatedNodes.splice(findNodeArrayIndex(updatedNodes, data.nodes[0]),1);\n      edges.update({\n         id: data.nodes[0],\n          from: data.nodes[0],\n          to: 1001,\n          hidden: false,\n          smooth:false,\n          length: 1\n\n      });\n\n    }\n    \n  \twasDragging = null;\n  }\n  \n   function drawBefore(context, nodeLabel)\n  {\n    network.moveTo({animation: false, position: {x:0, y:0}});\n\n  \tcanvasHeight = context.canvas.clientHeight;\n  \tcanvasWidth = context.canvas.clientWidth;\n  \t\n  \tcontext.beginPath();\n    context.moveTo(0, -canvasHeight\/2);\n    context.lineTo(0, canvasHeight\/2);\n    context.strokeStyle = \"#7acfd6\";\n    context.lineWidth = 5;\n    context.stroke();\n    \n    context.font = \"30px Arial\";\n    context.fillStyle = \"white\";\n    context.textAlign = \"center\";\n    \n    context.fillText(\"Not \".concat(currentIdName), -canvasWidth\/4, -canvasHeight\/2+50);\n    context.fillText(\" \".concat(currentIdName),canvasWidth\/4, -canvasHeight\/2+50);\n  }\n    init();\n    jQuery('#nextFriend').click(nextPerson);\n\n  \n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/\/\/\/  Their code goes below\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \n  function loadJSON(path, success, error) {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n          success(JSON.parse(xhr.responseText));\n        }\n        else {\n          error(xhr);\n        }\n      }\n    };\n    xhr.open('GET', path, true);\n    xhr.send();\n  }\n\n  function getScaleFreeNetwork(nodeCount) {\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(Math.random() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n\n        var from = i;\n        var to = j;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  }\n  \n  var randomSeed = 764; \/\/ Math.round(Math.random()*1000);\n  function seededRandom() {\n    var x = Math.sin(randomSeed++) * 10000;\n    return x - Math.floor(x);\n  }\n  \n  function getScaleFreeNetworkSeeded(nodeCount, seed) {\n    if (seed) {\n      randomSeed = Number(seed);\n    }\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n    var edgesId = 0;\n  \n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(seededRandom() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n        var from = i;\n        var to = j;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  \n  }\n});\n\n});\n\n\nQualtrics.SurveyEngine.addOnReady(function()\n{\n\t\/*Place your JavaScript here to run when the page is fully displayed*\/\n\t$('#NextButton').hide();\n});","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Removing duplicated friends Next friend You're done! Click the \"Next\" button on the bottom right...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"\/>\n  <title>Removing duplicates <\/title>\n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n\n\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.side-quest.com\/friendlyocean\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n\n<\/head>\n\n<body>\n<h2>Removing duplicated friends<\/h2>\n\n<div id=\"buttonsDiv\" class = \"buttonsDiv\" >\n\n\n  <button id=\"nextFriend\" type=\"button\" class = \"nextFriend\" style=\"float: right;\">Next friend<\/button>\n<\/div>\n<div id=\"mynetwork\" ><\/div>\n\n<div id=\"done\" class = \"overlay\">\n  \n You're done! Click the \"Next\" button on the bottom right of this page to continue the survey. \n<\/div>\n\n\n\n\n<\/body>\n<\/html>","DataExportTag":"Q20","QuestionID":"QID20"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID2","SecondaryAttribute":"Thank you for answering the questions! Next, we will ask you some questions on your social network.","TertiaryAttribute":null,"Payload":{"QuestionText":"Thank you for answering the questions! Next, we will ask you some questions on your social network.","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Thank you for answering the questions! Next, we will ask you some questions on your social network.","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionText_Unsafe":"Thank you for answering the questions! Next, we will ask you some questions on your social network.","DataExportTag":"Q2","QuestionID":"QID2"}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID26","SecondaryAttribute":"Thank you for completing this part of survey!","TertiaryAttribute":null,"Payload":{"QuestionText":"Thank you for completing this part of survey!","DefaultChoices":false,"DataExportTag":"Q26","QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Thank you for completing this part of survey!","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionID":"QID26","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function()\n{\n\t\/*Place your JavaScript here to run when the page loads*\/\n\tQualtrics.SurveyEngine.setEmbeddedData('family', \" \");\n\tQualtrics.SurveyEngine.setEmbeddedData('friend', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('calling', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('texting', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('f2f', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('social', \" \");  \n\tQualtrics.SurveyEngine.setEmbeddedData('networkName', \" \");  \t\n\n\n});\n\nQualtrics.SurveyEngine.addOnReady(function()\n{\n\t\/*Place your JavaScript here to run when the page is fully displayed*\/\n\n});\n\nQualtrics.SurveyEngine.addOnUnload(function()\n{\n\t\/*Place your JavaScript here to run when the page is unloaded*\/\n\n});","DataVisibility":{"Private":false,"Hidden":false}}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID27","SecondaryAttribute":"Thank you for completing this task!","TertiaryAttribute":null,"Payload":{"QuestionText":"Thank you for completing this task!","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function()\n{\n\t\/*Place your JavaScript here to run when the page loads*\/\n\tQualtrics.SurveyEngine.setEmbeddedData('family', \" \");\n\tQualtrics.SurveyEngine.setEmbeddedData('friend', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('calling', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('texting', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('f2f', \" \");  \t\n\tQualtrics.SurveyEngine.setEmbeddedData('social', \" \");  \t\n\n});\n\nQualtrics.SurveyEngine.addOnReady(function()\n{\n\t\/*Place your JavaScript here to run when the page is fully displayed*\/\n\n});\n\nQualtrics.SurveyEngine.addOnUnload(function()\n{\n\t\/*Place your JavaScript here to run when the page is unloaded*\/\n\n});","DefaultChoices":false,"DataExportTag":"Q27","QuestionID":"QID27","QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Thank you for completing this task!","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1}},{"SurveyID":"SV_6yzclsG6C2PT4mW","Element":"SQ","PrimaryAttribute":"QID25","SecondaryAttribute":"Welcome to your universe. node label","TertiaryAttribute":null,"Payload":{"QuestionText":"<title>Network | Manipulation<\/title>\n\n  \n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n\n  <link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.ruipei.net\/fun_qualtrics\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n<body>\n<h2> Welcome to your universe.<\/h2>\n\n\n<div id=\"network-popUp\">\n  <span id=\"operation\">node<\/span> <br>\n  <input type=\"hidden\" id=\"node-id\" value=\"new value\" \/>\n  <table style=\"margin:auto;\">\n    <tr>\n      <td>label<\/td><td><input id=\"node-label\" value=\"new value\" \/><\/td>\n    <\/tr><\/table>\n  <input type=\"button\" value=\"save\" id=\"saveButton\" \/>\n<\/div>\n\n<br \/>\n\n<div id=\"mynetwork\" ><\/div>\n\n\n<\/body>\n<\/html>","DefaultChoices":false,"QuestionType":"DB","Selector":"TB","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Welcome to your universe. node label","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function(){\n\n  \n  \t\n  $(document).ready(function() {\n\t  \/\/Closeness variables\n\t  \n\tvar USE_QUALTRICS =1;\n  \n  var isClosenessMode = false;\n  var hiddenEdgeData = new vis.DataSet({});\n  var arcRadiuses = [100,200,300,400,500,600,700,800,900,1000];\n  var dragRadius = 0;\n  var canvasHeight;\n  var canvasWidth;\n  var wasDragging = false;\n  var oldPosition;\n  \n  var edgesJSON = null;\n  var nodes;\n  var edges;\n  var allEdges;\n  var network = null;\n  var lastScale = 1.0;\n  var gravityConstant = 1.0;\n  \n  var data;\n  var seed = 2;\n  var edgeMode = true;\n      \n  function destroy() {\n  \tif (network !== null) {\n          network.destroy();\n          network = null;\n  }}\n  \n  function draw() {\n  \tdestroy();\n  \tnodes = new vis.DataSet({});\n  \tedges = new vis.DataSet({});\n  \t\n  \tString.prototype.replaceAll = function(str1, str2, ignore) \n{\n    return this.replace(new RegExp(str1.replace(\/([\\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])\/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(\/\\$\/g,\"$$$$\"):str2);\n} \n  \n          \n\tif (USE_QUALTRICS)\n\t{\n\t\tvar nodeString = \"${e:\/\/Field\/nodes}\";\n\t\tvar edgeString = \"${e:\/\/Field\/edges2}\";\n\t}\n\telse\n\t{\n\t  var nodeString = \"[{'id':0,'label':'Emma','closeness':'3'},{'id':1,'label':' Bob','closeness':'5'},{'id':2,'label':' Mary','closeness':'6'},{'id':3,'label':' Jim','closeness':'6'},{'id':4,'label':' Mike','closeness':'7'},{'id':5,'label':'bee','closeness':'3'},{'id':6,'label':'spy','closeness':'1'},{'id':7,'label':'whisky','closeness':'1'},{'id':8,'label':'wine','closeness':'4'},{'id':9,'label':'beer','closeness':'2'}]\";\n    var edgeString = \"[{'from':0,'to':1},{'from':0,'to':2},{'from':0,'to':3},{'from':0,'to':4},{'from':1,'to':2},{'from':1,'to':3},{'from':1,'to':4},{'from':2,'to':3},{'from':2,'to':4},{'from':3,'to':4},{'from':7,'to':9},{'from':9,'to':5},{'from':6,'to':7},{'from':6,'to':4},{'from':8,'to':9}]\";\n\t}\n    var nodeArray = JSON.parse(nodeString.toString().replaceAll(\"'\", '\"'));\n  \tvar nodeCount = nodeArray.length;\n  \tallEdges = JSON.parse(edgeString.toString().replaceAll(\"'\", '\"')); \/\/ allEdges: actual global edges\n  \tvar allEdgesCount = allEdges.length;  \n\t \n  \t\n  \tfor (var i = 0; i < nodeCount; i++) {\n        nodes.add(nodeArray[i]);\n    }\n    \n    for (var j = 0; j < allEdgesCount; j++) {\n        edges.add(allEdges[j]);\n    }\n    \n           \/\/ create a network\n        var container = document.getElementById('mynetwork');\n        var options = {\n          locale: 'en',\n          height:'600px',\n          width:'800px',\n  \t\t\"interaction\": {\"dragView\": false, \"zoomView\": false},\n  \t\t\"physics\": {\"maxVelocity\": 10,\n  \t\t\t\"barnesHut\": {\"gravitationalConstant\": -2000, \"damping\":0.3, \"centralGravity\":gravityConstant, \"avoidOverlap\":0.01}},\n          autoResize:false,\n  \t      layout: {randomSeed:seed}, \/\/ just to make sure the layout is the same when the locale is changed\n  \t      manipulation: {\n  \t        enabled: false,\n  \t        initiallyActive: false,\n  \t        addNode: function (data, callback) {\n  \t\t      \/\/ filling in the popup DOM elements\n  \t\t      document.getElementById('operation').innerHTML = \"Add Node\";\n  \t\t      document.getElementById('node-id').value = data.id;\n  \t\t      document.getElementById('node-label').value = data.label;\n  \t\t      document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);\n  \t\t      document.getElementById('network-popUp').style.display = 'block';\n  \t  \n  \t\t      jQuery(\"#node-label\").focus();\n  \t\t      jQuery(\"#node-label\").on('keyup', function (e) {\n  \t\t\t      if (e.keyCode == 13) {\n  \t\t\t\t    jQuery('#saveButton').click();\n  \t\t\t       }\n  \t\t      });\n  \t      },\n  \t      editNode: function (data, callback) {\n  \t\t    \/\/ filling in the popup DOM elements\n  \t\t    document.getElementById('operation').innerHTML = \"Edit Node\";\n  \t\t    document.getElementById('node-id').value = data.id;\n  \t\t    document.getElementById('node-label').value = data.label;\n  \t\t    document.getElementById('saveButton').onclick = saveData.bind(this, data, callback);\n  \t\t    document.getElementById('network-popUp').style.display = 'block';\n  \t\t\n  \t\t    jQuery(\"#node-label\").focus();\n  \t\t    jQuery(\"#node-label\").on('keyup', function (e) {\n  \t\t\t  if (e.keyCode == 13) {\n  \t\t\t\t  jQuery('#saveButton').click();\n  \t\t\t  }\n  \t\t  });\n  \t  },\n  \t  addEdge: function (data, callback) {\t\t\n  \t\tsimilarEdges = edges.get({filter : function (edgeData){\n  \t\t\treturn (edgeData.from == data.from && edgeData.to == data.to) || \n  \t\t\t(edgeData.from == data.to && edgeData.to == data.from);\n  \t\t}});\n  \t\t\n  \t\tif (similarEdges.length == 0 && data.from != data.to) {\n  \t\t  callback(data);\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tcallback(null);\n  \t\t}\n  \t\t\n  \t\tdrawUI();\n  \t  }\n  \t}\n    };\n    \n    data = { nodes:nodes, edges:edges };\n    network = new vis.Network(container, data, options);\n    \n    network.on('beforeDrawing', drawBefore);\n    \n    network.on('dragging', doDragging);\n    network.on('dragStart', doDragStart);\n    network.on('dragEnd', doDragOver);\n    \n    network.on('hold', function (networkData){\n  \tif (!edgeMode && !isClosenessMode)\n  \t{\n  \t\tif (networkData.edges.length == 0 && networkData.nodes.length == 0)\n  \t\t{\n  \t\t  var updatedIds = nodes.add([{\n  \t\t\t  label:'new',\n  \t\t\t  shadow: {enabled: true, color: 'rgba(255, 0, 0, 1)', x : 0, y : 0},\n  \t\t\t  x:networkData.pointer.canvas.x,\n  \t\t\t  y:networkData.pointer.canvas.y\n  \t\t  }]);\n  \t\t  network.selectNodes([updatedIds[0]]);\n  \t\t  network.editNode();\n  \t\t}\n  \t\telse if (networkData.nodes.length > 0)\n  \t\t{\n  \t\t\tnetwork.editNode();\n  \t\t}\n  \t}\n    });\n  }\n  \n  function clearPopUp() {\n    document.getElementById('saveButton').onclick = null;\n    document.getElementById('network-popUp').style.display = 'none';\n  }\n  \n  function saveData(data,callback) {\t\t\n    data.id = document.getElementById('node-id').value;\n    data.label = document.getElementById('node-label').value;\n    clearPopUp();\n    callback(data);\n  }\n  \n  function init() {\n    draw();\n    editNodeMode();\n  }\n  \n  function drawUI()\n  {\t\t\n  \tif (isClosenessMode)\n  \t{\n  \t\tdrawUICloseness();\n  \t\tjQuery(\"#deleteItem\").html(\"Delete selected planet\");\n      \tjQuery(\"#editNode\").attr(\"class\", \"tabUnselected\");\n      \tjQuery(\"#editConnection\").attr(\"class\", \"tabUnselected\");\n      \tjQuery(\"#editCloseness\").attr(\"class\", \"tabSelected\");\n      \n  \t}\n  \telse\n  \t{\n  \t\tif (edgeMode)\n  \t\t{\n  \t\t\tnetwork.addEdgeMode();\n  \t\t\tjQuery(\"#deleteItem\").html(\"Delete selected connection\");\n  \t\t\tjQuery(\"#editNode\").attr(\"class\", \"tabUnselected\");\n        \tjQuery(\"#editConnection\").attr(\"class\", \"tabSelected\");\n        \tjQuery(\"#editCloseness\").attr(\"class\", \"tabUnselected\");\n  \t\t}\n  \t\telse\n  \t\t{\t\n  \t\t\tnetwork.disableEditMode();\n  \t\t\tjQuery(\"#deleteItem\").html(\"Delete selected planet\");\t\t\n        \tjQuery(\"#editNode\").attr(\"class\", \"tabSelected\");\n        \tjQuery(\"#editConnection\").attr(\"class\", \"tabUnselected\");\n        \tjQuery(\"#editCloseness\").attr(\"class\", \"tabUnselected\");\n        \n  \t\t}\n  \t}\n  \t\n  \tif (edgeMode)\n  \t{\n  \t\tedges.forEach(function (data) {\n  \t\t\tedges.update({id: data.id, shadow: {enabled: true, color: 'rgba(255, 255, 100, 50)', x : 0, y : 0}});\n  \t\t});\n  \t\tnodes.forEach(function (data) {\n  \t\t\tnodes.update({id: data.id, shadow: {enabled: false}});\n  \t\t});\n  \t}\n  \telse\n  \t{\n  \t\tedges.forEach(function (data) {\n  \t\t\tedges.update({id: data.id, shadow: {enabled: false}});\n  \t\t});\n  \t\tnodes.forEach(function (data) {\n  \t\t\tnodes.update({id: data.id, shadow: {enabled: true, color: 'rgba(255, 255, 100, 50)', x : 0, y : 0}});\n  \t\t});\n  \t}\n\tif (USE_QUALTRICS)\n\t{\n\t\tupdateQualtricsData();\n\t}\n  }\n  \n  function editNodeMode()\n  {\n    edgeMode = false;\n    if (isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    drawUI();\n  }\n  \n  function editEdgeMode()\n  {\n    edgeMode = true;\n    if (isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    drawUI();\n  }\n  \n  function toggleEdgeMode()\n  {\n  \tedgeMode = !edgeMode;\n  \t\n  \tdrawUI();\t\n  \t\n  }\n  \n  function deleteItem()\n  {\n  \tif (!edgeMode)\n  \t{\n  \t\tif (network.getSelectedNodes().length > 0)\n  \t\t{\n  \t\t\tnetwork.deleteSelected();\n  \t\t}\n  \t}\n  \telse\n  \t{\n  \t\tif (network.getSelectedNodes().length == 0)\n  \t\t{\n  \t\t\tnetwork.deleteSelected();\n  \t\t}\n  \t}\n  \tdrawUI();\n  \t\n  }\n  \n  function updateQualtricsData(){\n    edgesJSON = JSON.stringify(edges.get({fields: ['to', 'from']}));\n    nodesJSON = JSON.stringify(nodes.get({fields: ['id', 'closeness']}));\n      \n\tQualtrics.SurveyEngine.setEmbeddedData('edges', edgesJSON);\n    Qualtrics.SurveyEngine.setEmbeddedData('nodes', nodesJSON);\n  }\n  \n  function nextStep_intro(){\n    jQuery(\"#instruction_intro\").remove();\n    jQuery(\"#instruction\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction\").css(\"display\", \"block\");\n    editNodeMode();\n  }\n  \n  function nextStep_node(){\n    jQuery(\"#instruction\").remove();\n    jQuery(\"#instruction2\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction2\").css(\"display\", \"block\");\n    editEdgeMode();\n  }\n  \n  function nextStep_edge(){\n    jQuery(\"#instruction2\").remove();\n    jQuery(\"#instruction5\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction5\").css(\"display\", \"block\");\n    editEdgeMode();\n  }\n\n  function nextStep_edge1(){\n    jQuery(\"#instruction5\").remove();\n    jQuery(\"#instruction3\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction3\").css(\"display\", \"block\");\n    editClosenessMode();\n  }\n  \n  function nextStep_orbit(){\n    jQuery(\"#instruction3\").remove();\n    jQuery(\"#instruction4\").detach().appendTo(\"#mynetwork\");  \n    jQuery(\"#instruction4\").css(\"display\", \"block\");\n    editNodeMode();\n  }\n  \n  function done(){\n    jQuery(\"#instruction4\").remove();\n  }\n  \n  init();\n  done();\n  \n  \n  \/\/Closeness stuff\n  function drawBefore(context)\n  {\n  \tcanvasHeight = context.canvas.clientHeight;\n  \tcanvasWidth = context.canvas.clientWidth;\n  \t\n  \tif (!wasDragging && !isClosenessMode)\n  \t{\n  \t\tminScale = 1.0;\n  \t\tnodes.forEach(function (data) {\n  \t\t\tpositionData = network.getPositions([data.id])[data.id];\n  \t\t\tDOMPosition = network.canvasToDOM(positionData);\n  \t\t\tDOMOffset = {\"x\": Math.abs(DOMPosition.x - canvasWidth\/2), \"y\": Math.abs(DOMPosition.y - canvasHeight\/2)};\n  \t\t\tcanvasOffset = {\"x\": DOMOffset.x \/ network.getScale(), \"y\": DOMOffset.y \/ network.getScale()};\n  \t\t\t\n  \t\t\tminScale = Math.min(minScale, canvasWidth\/canvasOffset.x\/2.5);\n  \t\t\tminScale = Math.min(minScale, canvasHeight\/canvasOffset.y\/2.5);\n  \t\t});\n  \t\t\n  \t\tminScale = Math.max(0.4, minScale);\n  \t\t\n  \t\tif (Math.abs(minScale - lastScale) > 0.000001)\n  \t\t{\n  \t\t\tnetwork.moveTo({\"scale\": network.getScale(), \"animation\": false, \"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\t\tnetwork.moveTo({\"scale\": minScale, \"animation\": {\"duration\": 2000.0, \"easingFunction\": 'easeInOutCubic'}, \"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\t\t\n  \t\t\tlastScale = minScale;\n  \t\t\t\n  \t\t\t\/\/network.startSimulation();\n  \t\t}\n  \t}\n  \t\n  \t\/\/network.moveTo({\"position\": {\"x\":0, \"y\":0}, \"offset\": {\"x\":0, \"y\":0}});\n  \t\n  \tif (isClosenessMode)\n  \t{\n  \t\tfor (var radius = 0; radius < arcRadiuses.length; radius++)\n  \t\t{\n  \t\t\tcontext.beginPath();\n  \t\t\t\n  \t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\n  \t\t\tif (radius == 0)\n  \t\t\t{\n  \t\t\t\tcontext.arc(circleCenter.x, circleCenter.y, arcRadiuses[radius]\/ network.getScale(), 0, 2 * Math.PI, true);\n  \t\t\t\tcontext.fillStyle = \"#FFFF55\";\n  \t\t\t\tcontext.globalAlpha = 0.5;\n  \t\t\t\tcontext.fill();\n  \t\t\t}\n  \t\t\telse\n  \t\t\t{\n  \t\t\t\tvar isDraggedOn = Math.abs(arcRadiuses[radius] - dragRadius) < 50;\n  \t\t\t\t\n  \t\t\t\tcontext.arc(circleCenter.x, circleCenter.y, arcRadiuses[radius] \/ network.getScale(), 0, 2 * Math.PI, true);\n  \t\t\t\tcontext.strokeStyle = \"#FFFF55\";\n  \t\t\t\tif (wasDragging == null || !isDraggedOn)\n  \t\t\t\t{\n  \t\t\t\t\tcontext.globalAlpha = 0.5;\n  \t\t\t\t\tcontext.setLineDash([5 \/ network.getScale(), 15 \/ network.getScale()]);\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\tcontext.globalAlpha = 1;\n  \t\t\t\t\tcontext.setLineDash([]);\n  \t\t\t\t}\n  \t\t\t\tcontext.stroke();\t\t\t\t\n  \t\t\t}\n  \t\t\t\n  \t\t\t\/\/context.endPath();\n  \t\t}\n  \t\t\n  \t\tcontext.setLineDash([]);\n  \t\tcontext.globalAlpha = 1;\n  \t\t\n  \t\tnodes.forEach(function (data) {\n  \t\t\tif ('radius' in data && wasDragging != data.id)\n  \t\t\t{\n  \t\t\t\tpositionData = network.getPositions([data.id])[data.id];\n  \t\t\t\t\n  \t\t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\tpointer = {\"x\": positionData.x, \"y\":positionData.y};\n  \t\t\t\t\n  \t\t\t\tangle = Math.atan2(pointer.y - circleCenter.y, pointer.x - circleCenter.x);\n  \t\t\t\t\n  \t\t\t\ttargetAngle = angle + 0.3*(data.angle - angle);\n  \t\t\t\t\n  \t\t\t\ttargetX = circleCenter.x + data.radius \/ network.getScale()*Math.cos(targetAngle);\n  \t\t\t\ttargetY = circleCenter.y + data.radius \/ network.getScale()*Math.sin(targetAngle);\t\n  \t\t\t\t\n  \t\t\t\tmovePositionX = pointer.x + 0.01*(targetX - positionData.x);\n  \t\t\t\tmovePositionY = pointer.y + 0.01*(targetY - positionData.y);\n  \t\t\t\t\n  \t\t\t\tnetwork.moveNode(data.id, targetX, targetY);\n  \t\t\t\t\n  \t\t\t}\n  \t\t});\n  \t\t\n  \t}\n  }\n  \n  function getDistance(x, y)\n  {\n  \treturn Math.sqrt(Math.pow(x,2) + Math.pow(y,2));\n  }\n  \n  function doDragging(data)\n  {\n\n  \tif (data.nodes.length > 0)\n  \t{\n  \t\twasDragging = data.nodes[0];\n  \t\t\n  \t\tif (isClosenessMode)\n  \t\t{\n  \t\t\tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \t\t\t\n  \t\t\tdragRadius = Math.sqrt(Math.pow(data.pointer.canvas.x - circleCenter.x, 2) + Math.pow(data.pointer.canvas.y - circleCenter.y, 2)) * network.getScale();\n  \t\t\t\n  \t\t}\n  \t}\n  }\n  \n  function getBestRadius(x, y)\n  {\n  \t\/\/Inputs in DOM space\n  \t\n  \tcircleCenter = network.DOMtoCanvas({x:0, y:canvasHeight});\n  \tpointer = network.DOMtoCanvas({\"x\": x, \"y\":y});\n  \t\n  \tfor (var radius in arcRadiuses)\n  \t{\n  \t\tif (radius == 0)\n  \t\t{\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tthisDragRadius = Math.sqrt(Math.pow(pointer.x - circleCenter.x, 2) + Math.pow(pointer.y - circleCenter.y, 2)) * network.getScale();\n  \t\t\n  \t\t\tif (Math.abs(arcRadiuses[radius] - thisDragRadius) < 50)\n  \t\t\t{\n  \t\t\t\treturn radius;\n  \t\t\t}\t\t\t\t\n  \t\t}\n  \t}\n  \t\n  \treturn -1;\n  }\n  \n  function doDragStart(data)\n  {\n  \tif (isClosenessMode && data.nodes.length > 0)\n  \t{\n  \t\tpositionData = network.getPositions([data.nodes[0]])[data.nodes[0]];\n  \t\t\n  \t\toldPosition = {\"x\": positionData.x, \"y\": positionData.y};\n  \t}\n  }\n  \n  function doDragOver(data)\n  {\n  \tif (isClosenessMode && data.nodes.length > 0)\n  \t{\n  \t\tedgePadding = 50;\n  \t\t\n  \t\tbestRadius = getBestRadius(data.pointer.DOM.x, data.pointer.DOM.y);\n  \t  \n  \t\tpointerX = Math.max(Math.min(data.pointer.DOM.x, -edgePadding + canvasWidth), edgePadding);\n  \t\tpointerY = Math.max(Math.min(data.pointer.DOM.y, -edgePadding + canvasHeight), edgePadding);\n  \t\t\t\t\n  \t\tpointer = network.DOMtoCanvas({\"x\": pointerX, \"y\": pointerY});\n  \t\tcircleCenter = network.DOMtoCanvas({\"x\": 0, \"y\": canvasHeight});\n  \t\t\n  \t\tif (bestRadius > 0)\n  \t\t{\n  \t\t\tnewRadius = arcRadiuses[bestRadius];\n  \t\t\tangle = Math.atan2(pointer.y - circleCenter.y, pointer.x - circleCenter.x);\n  \t\t\t\n  \t\t\tminAngle = -Math.acos((canvasWidth - edgePadding) \/ newRadius);\t\t\t\n  \t\t\tmaxAngle = -Math.asin((canvasHeight - edgePadding) \/ newRadius);\t\n  \n  \t\t\tif (!isNaN(maxAngle))\n  \t\t\t{\n  \t\t\t\tangle = Math.max(maxAngle, angle);\n  \t\t\t}\n  \t\t\tif (!isNaN(minAngle))\n  \t\t\t{\n  \t\t\t\tangle = Math.min(minAngle, angle);\n  \t\t\t}\n  \t\t\t\t\t\t\n  \t\t\tnewX = circleCenter.x + newRadius*Math.cos(angle);\n  \t\t\tnewY = circleCenter.y + newRadius*Math.sin(angle);\t\t\n  \t\t\t\n  \t\t\tnodes.update({'id' : data.nodes[0], 'x' : newX, 'y' : newY, 'radius': newRadius, 'angle': angle, 'closeness': bestRadius});\n  \t\t}\n  \t\telse\n  \t\t{\n  \t\t\tnetwork.moveNode(data.nodes[0], oldPosition.x, oldPosition.y);\n  \t\t}\n  \t}\n  \t\n  \twasDragging = null;\n  }\n  \n  function drawUICloseness()\n  {\n  \tnetwork.disableEditMode();\n  }\n  \n  function editClosenessMode()\n  {\n    if (!isClosenessMode)\n    {\n      toggleClosenessMode();\n    }\n    edgeMode = false;\n  }\n  \n  function toggleClosenessMode()\n  {\n  \tif (!isClosenessMode)\n  \t{\n  \t\tedgeMap = edges.get();\n  \t\tfor (var i = 0; i < edgeMap.length; i++)\n  \t\t{\n\t\t\thiddenEdgeData.add(edgeMap[i]);\n  \t\t}\n  \t\tedges.clear();\n  \t\t\n  \t\tnetwork.setOptions({\"physics\": {\"maxVelocity\":1, \"barnesHut\": {\"centralGravity\":1.0,\"avoidOverlap\":0}}});\n  \t\t\n  \t\tisClosenessMode = true;\n  \t}\n  \telse\n  \t{\n  \t\tedgeMap = hiddenEdgeData.get();\n\n  \t\tfor (var i = 0; i < edgeMap.length; i++)\n  \t\t{\n\t\t\tedges.add(edgeMap[i]);\n  \t\t}\n  \t\thiddenEdgeData.clear();\n  \t\t\n  \t\t\n  \t\tnetwork.setOptions({\"physics\": {\"maxVelocity\":10, \"barnesHut\": {\"centralGravity\":gravityConstant,\"avoidOverlap\":0.01}}});\n  \t\t\n  \t\tisClosenessMode = false;\n  \t}\n  \t\n  \tdrawUI();\n  }\n  \n  \n  \n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/Their code goes below\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n  \n  function loadJSON(path, success, error) {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n          success(JSON.parse(xhr.responseText));\n        }\n        else {\n          error(xhr);\n        }\n      }\n    };\n    xhr.open('GET', path, true);\n    xhr.send();\n  }\n  \n  \n  function getScaleFreeNetwork(nodeCount) {\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(Math.random() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n  \n        var from = i;\n        var to = j;\n        edges.push({\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  }\n  \n  var randomSeed = 764; \/\/ Math.round(Math.random()*1000);\n  function seededRandom() {\n    var x = Math.sin(randomSeed++) * 10000;\n    return x - Math.floor(x);\n  }\n  \n  function getScaleFreeNetworkSeeded(nodeCount, seed) {\n    if (seed) {\n      randomSeed = Number(seed);\n    }\n    var nodes = [];\n    var edges = [];\n    var connectionCount = [];\n    var edgesId = 0;\n  \n  \n    \/\/ randomly create some nodes and edges\n    for (var i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        label: String(i)\n      });\n  \n      connectionCount[i] = 0;\n  \n      \/\/ create edges in a scale-free-network way\n      if (i == 1) {\n        var from = i;\n        var to = 0;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n      else if (i > 1) {\n        var conn = edges.length * 2;\n        var rand = Math.floor(seededRandom() * conn);\n        var cum = 0;\n        var j = 0;\n        while (j < connectionCount.length && cum < rand) {\n          cum += connectionCount[j];\n          j++;\n        }\n  \n  \n        var from = i;\n        var to = j;\n        edges.push({\n          id: edgesId++,\n          from: from,\n          to: to,\n          dashes:true\n        });\n        connectionCount[from]++;\n        connectionCount[to]++;\n      }\n    }\n  \n    return {nodes:nodes, edges:edges};\n  \n  }\n  \n  });\n});","DataVisibility":{"Private":false,"Hidden":false},"QuestionText_Unsafe":"<title>Network | Manipulation<\/title>\n\n  \n<script src=\"https:\/\/code.jquery.com\/jquery-1.10.2.js\"><\/script>\n  \n\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/main.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n  <script type=\"text\/javascript\" src=\"https:\/\/www.side-quest.com\/friendlyocean\/vis.js\"><\/script>\n  <link href=\"https:\/\/www.side-quest.com\/friendlyocean\/vis-network.min.css\" rel=\"stylesheet\" type=\"text\/css\" \/>\n\n\n<body>\n<h2> Welcome to your universe.<\/h2>\n\n\n<div id=\"network-popUp\">\n  <span id=\"operation\">node<\/span> <br>\n  <input type=\"hidden\" id=\"node-id\" value=\"new value\" \/>\n  <table style=\"margin:auto;\">\n    <tr>\n      <td>label<\/td><td><input id=\"node-label\" value=\"new value\" \/><\/td>\n    <\/tr><\/table>\n  <input type=\"button\" value=\"save\" id=\"saveButton\" \/>\n<\/div>\n\n<br \/>\n\n<div id=\"mynetwork\" ><\/div>\n\n\n<\/body>\n<\/html>","DataExportTag":"Q25","QuestionID":"QID25"}}]}